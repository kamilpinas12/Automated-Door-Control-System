
kurnik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004824  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004970  08004970  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004970  08004970  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004970  08004970  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004974  08004974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08004984  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08004984  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea28  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a16  00000000  00000000  0002eaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  000314b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba6  00000000  00000000  000323c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018912  00000000  00000000  00032f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001417a  00000000  00000000  0004b880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ccce  00000000  00000000  0005f9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d34  00000000  00000000  000ec6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000f03fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004918 	.word	0x08004918

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08004918 	.word	0x08004918

0800014c <Read16>:
uint16_t ina219_calibrationValue;
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af04      	add	r7, sp, #16
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	6818      	ldr	r0, [r3, #0]
 800015c:	78fb      	ldrb	r3, [r7, #3]
 800015e:	b29a      	uxth	r2, r3
 8000160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000164:	9302      	str	r3, [sp, #8]
 8000166:	2302      	movs	r3, #2
 8000168:	9301      	str	r3, [sp, #4]
 800016a:	f107 030c 	add.w	r3, r7, #12
 800016e:	9300      	str	r3, [sp, #0]
 8000170:	2301      	movs	r3, #1
 8000172:	2180      	movs	r1, #128	; 0x80
 8000174:	f002 fa1c 	bl	80025b0 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8000178:	7b3b      	ldrb	r3, [r7, #12]
 800017a:	021b      	lsls	r3, r3, #8
 800017c:	b21a      	sxth	r2, r3
 800017e:	7b7b      	ldrb	r3, [r7, #13]
 8000180:	b21b      	sxth	r3, r3
 8000182:	4313      	orrs	r3, r2
 8000184:	b21b      	sxth	r3, r3
 8000186:	b29b      	uxth	r3, r3
}
 8000188:	4618      	mov	r0, r3
 800018a:	3710      	adds	r7, #16
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}

08000190 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b088      	sub	sp, #32
 8000194:	af04      	add	r7, sp, #16
 8000196:	6078      	str	r0, [r7, #4]
 8000198:	460b      	mov	r3, r1
 800019a:	70fb      	strb	r3, [r7, #3]
 800019c:	4613      	mov	r3, r2
 800019e:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80001a0:	883b      	ldrh	r3, [r7, #0]
 80001a2:	0a1b      	lsrs	r3, r3, #8
 80001a4:	b29b      	uxth	r3, r3
 80001a6:	b2db      	uxtb	r3, r3
 80001a8:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 80001aa:	883b      	ldrh	r3, [r7, #0]
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	6818      	ldr	r0, [r3, #0]
 80001b4:	78fb      	ldrb	r3, [r7, #3]
 80001b6:	b29a      	uxth	r2, r3
 80001b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001bc:	9302      	str	r3, [sp, #8]
 80001be:	2302      	movs	r3, #2
 80001c0:	9301      	str	r3, [sp, #4]
 80001c2:	f107 030c 	add.w	r3, r7, #12
 80001c6:	9300      	str	r3, [sp, #0]
 80001c8:	2301      	movs	r3, #1
 80001ca:	2180      	movs	r1, #128	; 0x80
 80001cc:	f002 f8f6 	bl	80023bc <HAL_I2C_Mem_Write>
}
 80001d0:	bf00      	nop
 80001d2:	3710      	adds	r7, #16
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}

080001d8 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 80001e0:	2102      	movs	r1, #2
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f7ff ffb2 	bl	800014c <Read16>
 80001e8:	4603      	mov	r3, r0
 80001ea:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 80001ec:	89fb      	ldrh	r3, [r7, #14]
 80001ee:	08db      	lsrs	r3, r3, #3
 80001f0:	b29b      	uxth	r3, r3
 80001f2:	009b      	lsls	r3, r3, #2
 80001f4:	b29b      	uxth	r3, r3

}
 80001f6:	4618      	mov	r0, r3
 80001f8:	3710      	adds	r7, #16
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}

080001fe <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 80001fe:	b580      	push	{r7, lr}
 8000200:	b084      	sub	sp, #16
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8000206:	2104      	movs	r1, #4
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f7ff ff9f 	bl	800014c <Read16>
 800020e:	4603      	mov	r3, r0
 8000210:	81fb      	strh	r3, [r7, #14]

	return (result );
 8000212:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000216:	4618      	mov	r0, r3
 8000218:	3710      	adds	r7, #16
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ffe8 	bl	80001fe <INA219_ReadCurrent_raw>
 800022e:	4603      	mov	r3, r0
 8000230:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 8000232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000236:	4a05      	ldr	r2, [pc, #20]	; (800024c <INA219_ReadCurrent+0x2c>)
 8000238:	f9b2 2000 	ldrsh.w	r2, [r2]
 800023c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000240:	b21b      	sxth	r3, r3
}
 8000242:	4618      	mov	r0, r3
 8000244:	3710      	adds	r7, #16
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	2000002a 	.word	0x2000002a

08000250 <INA219_Reset>:

	return (result * 0.01 );
}

void INA219_Reset(INA219_t *ina219)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8000258:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800025c:	2100      	movs	r1, #0
 800025e:	6878      	ldr	r0, [r7, #4]
 8000260:	f7ff ff96 	bl	8000190 <Write16>
	HAL_Delay(1);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 ffb7 	bl	80011d8 <HAL_Delay>
}
 800026a:	bf00      	nop
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}

08000272 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8000272:	b580      	push	{r7, lr}
 8000274:	b082      	sub	sp, #8
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	460b      	mov	r3, r1
 800027c:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 800027e:	887b      	ldrh	r3, [r7, #2]
 8000280:	461a      	mov	r2, r3
 8000282:	2105      	movs	r1, #5
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	f7ff ff83 	bl	8000190 <Write16>
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
 800029a:	460b      	mov	r3, r1
 800029c:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 800029e:	887b      	ldrh	r3, [r7, #2]
 80002a0:	461a      	mov	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f7ff ff73 	bl	8000190 <Write16>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 80002bc:	f643 139f 	movw	r3, #14751	; 0x399f
 80002c0:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <INA219_setCalibration_32V_2A+0x40>)
 80002c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80002c8:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 80002ca:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <INA219_setCalibration_32V_2A+0x44>)
 80002cc:	220a      	movs	r2, #10
 80002ce:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 80002d0:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <INA219_setCalibration_32V_2A+0x48>)
 80002d2:	2202      	movs	r2, #2
 80002d4:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 80002d6:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <INA219_setCalibration_32V_2A+0x40>)
 80002d8:	881b      	ldrh	r3, [r3, #0]
 80002da:	4619      	mov	r1, r3
 80002dc:	6878      	ldr	r0, [r7, #4]
 80002de:	f7ff ffc8 	bl	8000272 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 80002e2:	89fb      	ldrh	r3, [r7, #14]
 80002e4:	4619      	mov	r1, r3
 80002e6:	6878      	ldr	r0, [r7, #4]
 80002e8:	f7ff ffd3 	bl	8000292 <INA219_setConfig>
}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000028 	.word	0x20000028
 80002f8:	2000002a 	.word	0x2000002a
 80002fc:	2000002c 	.word	0x2000002c

08000300 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	4613      	mov	r3, r2
 800030c:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	68ba      	ldr	r2, [r7, #8]
 8000312:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	79fa      	ldrb	r2, [r7, #7]
 8000318:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 800031a:	4b10      	ldr	r3, [pc, #64]	; (800035c <INA219_Init+0x5c>)
 800031c:	2200      	movs	r2, #0
 800031e:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <INA219_Init+0x60>)
 8000322:	2200      	movs	r2, #0
 8000324:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	b29b      	uxth	r3, r3
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	b299      	uxth	r1, r3
 800032e:	2302      	movs	r3, #2
 8000330:	2203      	movs	r2, #3
 8000332:	68b8      	ldr	r0, [r7, #8]
 8000334:	f002 fba4 	bl	8002a80 <HAL_I2C_IsDeviceReady>
 8000338:	4603      	mov	r3, r0
 800033a:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 800033c:	7dfb      	ldrb	r3, [r7, #23]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d107      	bne.n	8000352 <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 8000342:	68f8      	ldr	r0, [r7, #12]
 8000344:	f7ff ff84 	bl	8000250 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8000348:	68f8      	ldr	r0, [r7, #12]
 800034a:	f7ff ffb3 	bl	80002b4 <INA219_setCalibration_32V_2A>

		return 1;
 800034e:	2301      	movs	r3, #1
 8000350:	e000      	b.n	8000354 <INA219_Init+0x54>
	}

	else
	{
		return 0;
 8000352:	2300      	movs	r3, #0
	}
}
 8000354:	4618      	mov	r0, r3
 8000356:	3718      	adds	r7, #24
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	2000002a 	.word	0x2000002a
 8000360:	2000002c 	.word	0x2000002c

08000364 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_ADC1_Init+0x74>)
 8000376:	4a19      	ldr	r2, [pc, #100]	; (80003dc <MX_ADC1_Init+0x78>)
 8000378:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <MX_ADC1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_ADC1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <MX_ADC1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_ADC1_Init+0x74>)
 800038e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000392:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000394:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <MX_ADC1_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_ADC1_Init+0x74>)
 800039c:	2201      	movs	r2, #1
 800039e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003a0:	480d      	ldr	r0, [pc, #52]	; (80003d8 <MX_ADC1_Init+0x74>)
 80003a2:	f000 ff3d 	bl	8001220 <HAL_ADC_Init>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003ac:	f000 fd47 	bl	8000e3e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003b0:	2301      	movs	r3, #1
 80003b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b4:	2301      	movs	r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003b8:	2307      	movs	r3, #7
 80003ba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	4619      	mov	r1, r3
 80003c0:	4805      	ldr	r0, [pc, #20]	; (80003d8 <MX_ADC1_Init+0x74>)
 80003c2:	f001 f9c5 	bl	8001750 <HAL_ADC_ConfigChannel>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003cc:	f000 fd37 	bl	8000e3e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000030 	.word	0x20000030
 80003dc:	40012400 	.word	0x40012400

080003e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e8:	f107 0310 	add.w	r3, r7, #16
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a14      	ldr	r2, [pc, #80]	; (800044c <HAL_ADC_MspInit+0x6c>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d121      	bne.n	8000444 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000400:	4b13      	ldr	r3, [pc, #76]	; (8000450 <HAL_ADC_MspInit+0x70>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a12      	ldr	r2, [pc, #72]	; (8000450 <HAL_ADC_MspInit+0x70>)
 8000406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <HAL_ADC_MspInit+0x70>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000418:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <HAL_ADC_MspInit+0x70>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a0c      	ldr	r2, [pc, #48]	; (8000450 <HAL_ADC_MspInit+0x70>)
 800041e:	f043 0304 	orr.w	r3, r3, #4
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <HAL_ADC_MspInit+0x70>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0304 	and.w	r3, r3, #4
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000430:	2302      	movs	r3, #2
 8000432:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000434:	2303      	movs	r3, #3
 8000436:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	4805      	ldr	r0, [pc, #20]	; (8000454 <HAL_ADC_MspInit+0x74>)
 8000440:	f001 fcac 	bl	8001d9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000444:	bf00      	nop
 8000446:	3720      	adds	r7, #32
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40012400 	.word	0x40012400
 8000450:	40021000 	.word	0x40021000
 8000454:	40010800 	.word	0x40010800

08000458 <get_state>:
 */
#include "func.h"


bool get_state(pin pin)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
	if (pin == kran_otw)
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d10b      	bne.n	8000480 <get_state+0x28>
	{
		if(HAL_GPIO_ReadPin(KRAN_OTW_GPIO_Port, KRAN_OTW_Pin) == GPIO_PIN_RESET)
 8000468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046c:	4816      	ldr	r0, [pc, #88]	; (80004c8 <get_state+0x70>)
 800046e:	f001 fe19 	bl	80020a4 <HAL_GPIO_ReadPin>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d101      	bne.n	800047c <get_state+0x24>
		{
			return 0;
 8000478:	2300      	movs	r3, #0
 800047a:	e020      	b.n	80004be <get_state+0x66>
		}
		else
		{
			return 1;
 800047c:	2301      	movs	r3, #1
 800047e:	e01e      	b.n	80004be <get_state+0x66>
		}
	}


	if (pin == kran_zam)
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d10b      	bne.n	800049e <get_state+0x46>
	{
		if(HAL_GPIO_ReadPin(KRAN_ZAM_GPIO_Port, KRAN_ZAM_Pin) == GPIO_PIN_RESET)
 8000486:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800048a:	480f      	ldr	r0, [pc, #60]	; (80004c8 <get_state+0x70>)
 800048c:	f001 fe0a 	bl	80020a4 <HAL_GPIO_ReadPin>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d101      	bne.n	800049a <get_state+0x42>
		{
			return 0;
 8000496:	2300      	movs	r3, #0
 8000498:	e011      	b.n	80004be <get_state+0x66>
		}
		else
		{
			return 1;
 800049a:	2301      	movs	r3, #1
 800049c:	e00f      	b.n	80004be <get_state+0x66>
		}
	}

	if (pin == button)
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	2b02      	cmp	r3, #2
 80004a2:	d10b      	bne.n	80004bc <get_state+0x64>
		{
			if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)
 80004a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a8:	4808      	ldr	r0, [pc, #32]	; (80004cc <get_state+0x74>)
 80004aa:	f001 fdfb 	bl	80020a4 <HAL_GPIO_ReadPin>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d101      	bne.n	80004b8 <get_state+0x60>
			{
				return 1;
 80004b4:	2301      	movs	r3, #1
 80004b6:	e002      	b.n	80004be <get_state+0x66>
			}
			else
			{
				return 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	e000      	b.n	80004be <get_state+0x66>
			}
		}

	return 0;
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40010c00 	.word	0x40010c00
 80004cc:	40010800 	.word	0x40010800

080004d0 <motor>:


void motor(stan_dzialania command)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	static int counter;

	if(command == zamkniete || command == otwarte || command == pomiedzy)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d005      	beq.n	80004ec <motor+0x1c>
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	d002      	beq.n	80004ec <motor+0x1c>
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d10b      	bne.n	8000504 <motor+0x34>
	{
		counter = 0;
 80004ec:	4b27      	ldr	r3, [pc, #156]	; (800058c <motor+0xbc>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80004f2:	4b27      	ldr	r3, [pc, #156]	; (8000590 <motor+0xc0>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2200      	movs	r2, #0
 80004f8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80004fa:	4b25      	ldr	r3, [pc, #148]	; (8000590 <motor+0xc0>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2200      	movs	r2, #0
 8000500:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
	}



}
 8000502:	e03e      	b.n	8000582 <motor+0xb2>
	else if(command == otwieranie)
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	2b03      	cmp	r3, #3
 8000508:	d11c      	bne.n	8000544 <motor+0x74>
		if(counter == 0)counter = motor_starting_value;
 800050a:	4b20      	ldr	r3, [pc, #128]	; (800058c <motor+0xbc>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d103      	bne.n	800051a <motor+0x4a>
 8000512:	4b1e      	ldr	r3, [pc, #120]	; (800058c <motor+0xbc>)
 8000514:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000518:	601a      	str	r2, [r3, #0]
		if(counter < 990)
 800051a:	4b1c      	ldr	r3, [pc, #112]	; (800058c <motor+0xbc>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f240 32dd 	movw	r2, #989	; 0x3dd
 8000522:	4293      	cmp	r3, r2
 8000524:	dc04      	bgt.n	8000530 <motor+0x60>
			counter += 10;
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <motor+0xbc>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	330a      	adds	r3, #10
 800052c:	4a17      	ldr	r2, [pc, #92]	; (800058c <motor+0xbc>)
 800052e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000530:	4b17      	ldr	r3, [pc, #92]	; (8000590 <motor+0xc0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2200      	movs	r2, #0
 8000536:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, counter);
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <motor+0xbc>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <motor+0xc0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000542:	e01e      	b.n	8000582 <motor+0xb2>
	else if (command == zamykanie)
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	2b04      	cmp	r3, #4
 8000548:	d11b      	bne.n	8000582 <motor+0xb2>
		if(counter == 0) counter = motor_starting_value;
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <motor+0xbc>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d103      	bne.n	800055a <motor+0x8a>
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <motor+0xbc>)
 8000554:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000558:	601a      	str	r2, [r3, #0]
		if(counter < 990)
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <motor+0xbc>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f240 32dd 	movw	r2, #989	; 0x3dd
 8000562:	4293      	cmp	r3, r2
 8000564:	dc04      	bgt.n	8000570 <motor+0xa0>
			counter += 10;
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <motor+0xbc>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	330a      	adds	r3, #10
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <motor+0xbc>)
 800056e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, counter);
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <motor+0xbc>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <motor+0xc0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <motor+0xc0>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2200      	movs	r2, #0
 8000580:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	20000060 	.word	0x20000060
 8000590:	200000d0 	.word	0x200000d0

08000594 <pomiar_foto>:



void pomiar_foto(time_of_day* state)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	//pomiar ADC
	HAL_ADC_Start(&hadc1);
 800059c:	482a      	ldr	r0, [pc, #168]	; (8000648 <pomiar_foto+0xb4>)
 800059e:	f000 ff17 	bl	80013d0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005a2:	f04f 31ff 	mov.w	r1, #4294967295
 80005a6:	4828      	ldr	r0, [pc, #160]	; (8000648 <pomiar_foto+0xb4>)
 80005a8:	f000 ffc0 	bl	800152c <HAL_ADC_PollForConversion>
	uint32_t val = HAL_ADC_GetValue(&hadc1);
 80005ac:	4826      	ldr	r0, [pc, #152]	; (8000648 <pomiar_foto+0xb4>)
 80005ae:	f001 f8c3 	bl	8001738 <HAL_ADC_GetValue>
 80005b2:	60f8      	str	r0, [r7, #12]


	static uint8_t counter_noc;
	static uint8_t counter_dzien;

	if(val > granica_dzien && (*state == noc || *state == undefined))
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ba:	d911      	bls.n	80005e0 <pomiar_foto+0x4c>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d003      	beq.n	80005cc <pomiar_foto+0x38>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d109      	bne.n	80005e0 <pomiar_foto+0x4c>
	{
		counter_dzien ++;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <pomiar_foto+0xb8>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <pomiar_foto+0xb8>)
 80005d6:	701a      	strb	r2, [r3, #0]
		counter_noc = 0;
 80005d8:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <pomiar_foto+0xbc>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
 80005de:	e01a      	b.n	8000616 <pomiar_foto+0x82>
	}

	else if(val < granica_noc && (*state == dzien || *state == undefined))
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b3b      	cmp	r3, #59	; 0x3b
 80005e4:	d811      	bhi.n	800060a <pomiar_foto+0x76>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d003      	beq.n	80005f6 <pomiar_foto+0x62>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d109      	bne.n	800060a <pomiar_foto+0x76>
	{
		counter_noc ++;
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <pomiar_foto+0xbc>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <pomiar_foto+0xbc>)
 8000600:	701a      	strb	r2, [r3, #0]
		counter_dzien = 0;
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <pomiar_foto+0xb8>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
 8000608:	e005      	b.n	8000616 <pomiar_foto+0x82>
	}
	else
	{
		counter_noc = 0;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <pomiar_foto+0xbc>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
		counter_dzien = 0;
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <pomiar_foto+0xb8>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
	}


	if(counter_dzien > 150)
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <pomiar_foto+0xb8>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b96      	cmp	r3, #150	; 0x96
 800061c:	d905      	bls.n	800062a <pomiar_foto+0x96>
	{
		counter_dzien = 0;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <pomiar_foto+0xb8>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
		*state = dzien;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
	}

	if(counter_noc > 150)
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <pomiar_foto+0xbc>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b96      	cmp	r3, #150	; 0x96
 8000630:	d905      	bls.n	800063e <pomiar_foto+0xaa>
	{
		counter_noc = 0;
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <pomiar_foto+0xbc>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
		*state = noc;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
	}

}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000030 	.word	0x20000030
 800064c:	20000064 	.word	0x20000064
 8000650:	20000065 	.word	0x20000065

08000654 <error_led>:



void error_led(error_code error)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	motor(pomiedzy);
 800065e:	2000      	movs	r0, #0
 8000660:	f7ff ff36 	bl	80004d0 <motor>

	while(!get_state(button))
 8000664:	e02b      	b.n	80006be <error_led+0x6a>
	{
		HAL_IWDG_Refresh(&hiwdg);
 8000666:	481d      	ldr	r0, [pc, #116]	; (80006dc <error_led+0x88>)
 8000668:	f002 ff2d 	bl	80034c6 <HAL_IWDG_Refresh>

		for(int i = 0; (i < error) && !get_state(button); i++)
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	e014      	b.n	800069c <error_led+0x48>
		{
			HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000678:	4819      	ldr	r0, [pc, #100]	; (80006e0 <error_led+0x8c>)
 800067a:	f001 fd2a 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_Delay(150);
 800067e:	2096      	movs	r0, #150	; 0x96
 8000680:	f000 fdaa 	bl	80011d8 <HAL_Delay>
			HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068a:	4815      	ldr	r0, [pc, #84]	; (80006e0 <error_led+0x8c>)
 800068c:	f001 fd21 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_Delay(150);
 8000690:	2096      	movs	r0, #150	; 0x96
 8000692:	f000 fda1 	bl	80011d8 <HAL_Delay>
		for(int i = 0; (i < error) && !get_state(button); i++)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3301      	adds	r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	da08      	bge.n	80006b6 <error_led+0x62>
 80006a4:	2002      	movs	r0, #2
 80006a6:	f7ff fed7 	bl	8000458 <get_state>
 80006aa:	4603      	mov	r3, r0
 80006ac:	f083 0301 	eor.w	r3, r3, #1
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1dd      	bne.n	8000672 <error_led+0x1e>
		}
		HAL_Delay(700);
 80006b6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80006ba:	f000 fd8d 	bl	80011d8 <HAL_Delay>
	while(!get_state(button))
 80006be:	2002      	movs	r0, #2
 80006c0:	f7ff feca 	bl	8000458 <get_state>
 80006c4:	4603      	mov	r3, r0
 80006c6:	f083 0301 	eor.w	r3, r3, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1ca      	bne.n	8000666 <error_led+0x12>
	}
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000bc 	.word	0x200000bc
 80006e0:	40011000 	.word	0x40011000

080006e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f8:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <MX_GPIO_Init+0xdc>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a30      	ldr	r2, [pc, #192]	; (80007c0 <MX_GPIO_Init+0xdc>)
 80006fe:	f043 0310 	orr.w	r3, r3, #16
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <MX_GPIO_Init+0xdc>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000710:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <MX_GPIO_Init+0xdc>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a2a      	ldr	r2, [pc, #168]	; (80007c0 <MX_GPIO_Init+0xdc>)
 8000716:	f043 0320 	orr.w	r3, r3, #32
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <MX_GPIO_Init+0xdc>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0320 	and.w	r3, r3, #32
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <MX_GPIO_Init+0xdc>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a24      	ldr	r2, [pc, #144]	; (80007c0 <MX_GPIO_Init+0xdc>)
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MX_GPIO_Init+0xdc>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_GPIO_Init+0xdc>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <MX_GPIO_Init+0xdc>)
 8000746:	f043 0308 	orr.w	r3, r3, #8
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_GPIO_Init+0xdc>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0308 	and.w	r3, r3, #8
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075e:	4819      	ldr	r0, [pc, #100]	; (80007c4 <MX_GPIO_Init+0xe0>)
 8000760:	f001 fcb7 	bl	80020d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8000764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2302      	movs	r3, #2
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	4619      	mov	r1, r3
 800077c:	4811      	ldr	r0, [pc, #68]	; (80007c4 <MX_GPIO_Init+0xe0>)
 800077e:	f001 fb0d 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = KRAN_OTW_Pin|KRAN_ZAM_Pin;
 8000782:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4619      	mov	r1, r3
 8000796:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_GPIO_Init+0xe4>)
 8000798:	f001 fb00 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800079c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	4619      	mov	r1, r3
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <MX_GPIO_Init+0xe8>)
 80007b2:	f001 faf3 	bl	8001d9c <HAL_GPIO_Init>

}
 80007b6:	bf00      	nop
 80007b8:	3720      	adds	r7, #32
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40011000 	.word	0x40011000
 80007c8:	40010c00 	.word	0x40010c00
 80007cc:	40010800 	.word	0x40010800

080007d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_I2C1_Init+0x50>)
 80007d6:	4a13      	ldr	r2, [pc, #76]	; (8000824 <MX_I2C1_Init+0x54>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_I2C1_Init+0x50>)
 80007dc:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_I2C1_Init+0x58>)
 80007de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_I2C1_Init+0x50>)
 80007ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_I2C1_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_I2C1_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_I2C1_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_I2C1_Init+0x50>)
 800080e:	f001 fc91 	bl	8002134 <HAL_I2C_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000818:	f000 fb11 	bl	8000e3e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000068 	.word	0x20000068
 8000824:	40005400 	.word	0x40005400
 8000828:	000186a0 	.word	0x000186a0

0800082c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a15      	ldr	r2, [pc, #84]	; (800089c <HAL_I2C_MspInit+0x70>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d123      	bne.n	8000894 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <HAL_I2C_MspInit+0x74>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <HAL_I2C_MspInit+0x74>)
 8000852:	f043 0308 	orr.w	r3, r3, #8
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HAL_I2C_MspInit+0x74>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f003 0308 	and.w	r3, r3, #8
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000864:	23c0      	movs	r3, #192	; 0xc0
 8000866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000868:	2312      	movs	r3, #18
 800086a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	4619      	mov	r1, r3
 8000876:	480b      	ldr	r0, [pc, #44]	; (80008a4 <HAL_I2C_MspInit+0x78>)
 8000878:	f001 fa90 	bl	8001d9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_I2C_MspInit+0x74>)
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <HAL_I2C_MspInit+0x74>)
 8000882:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000886:	61d3      	str	r3, [r2, #28]
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_I2C_MspInit+0x74>)
 800088a:	69db      	ldr	r3, [r3, #28]
 800088c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40005400 	.word	0x40005400
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40010c00 	.word	0x40010c00

080008a8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_IWDG_Init+0x2c>)
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <MX_IWDG_Init+0x30>)
 80008b0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_IWDG_Init+0x2c>)
 80008b4:	2204      	movs	r2, #4
 80008b6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_IWDG_Init+0x2c>)
 80008ba:	f640 72ff 	movw	r2, #4095	; 0xfff
 80008be:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_IWDG_Init+0x2c>)
 80008c2:	f002 fdbe 	bl	8003442 <HAL_IWDG_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80008cc:	f000 fab7 	bl	8000e3e <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000bc 	.word	0x200000bc
 80008d8:	40003000 	.word	0x40003000

080008dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b090      	sub	sp, #64	; 0x40
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e2:	f000 fc17 	bl	8001114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e6:	f000 fa4d 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ea:	f7ff fefb 	bl	80006e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008ee:	f7ff ff6f 	bl	80007d0 <MX_I2C1_Init>
  MX_ADC1_Init();
 80008f2:	f7ff fd37 	bl	8000364 <MX_ADC1_Init>
  MX_TIM2_Init();
 80008f6:	f000 fb07 	bl	8000f08 <MX_TIM2_Init>
  MX_IWDG_Init();
 80008fa:	f7ff ffd5 	bl	80008a8 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  // Uruchomienie układu

  for (int i = 0; i < 10; i++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000902:	e00a      	b.n	800091a <main+0x3e>
    HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 8000904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000908:	48b7      	ldr	r0, [pc, #732]	; (8000be8 <main+0x30c>)
 800090a:	f001 fbfa 	bl	8002102 <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 800090e:	2032      	movs	r0, #50	; 0x32
 8000910:	f000 fc62 	bl	80011d8 <HAL_Delay>
  for (int i = 0; i < 10; i++) {
 8000914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000916:	3301      	adds	r3, #1
 8000918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800091a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800091c:	2b09      	cmp	r3, #9
 800091e:	ddf1      	ble.n	8000904 <main+0x28>
  }

  while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS))
 8000920:	bf00      	nop
 8000922:	2240      	movs	r2, #64	; 0x40
 8000924:	49b1      	ldr	r1, [pc, #708]	; (8000bec <main+0x310>)
 8000926:	48b2      	ldr	r0, [pc, #712]	; (8000bf0 <main+0x314>)
 8000928:	f7ff fcea 	bl	8000300 <INA219_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d0f7      	beq.n	8000922 <main+0x46>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // ZMIENNE STANU
  time_of_day pora_dnia = undefined;
 8000932:	2302      	movs	r3, #2
 8000934:	71fb      	strb	r3, [r7, #7]
  stan_dzialania stan;
  mode tryb = automatic;
 8000936:	2301      	movs	r3, #1
 8000938:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  stan_dzialania lst_stan;
  bool button_flag = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38


  //DELAY
  unsigned long lst_time_pomiar = HAL_GetTick();
 8000942:	f000 fc3f 	bl	80011c4 <HAL_GetTick>
 8000946:	6378      	str	r0, [r7, #52]	; 0x34
  unsigned long lst_time_manual = HAL_GetTick();
 8000948:	f000 fc3c 	bl	80011c4 <HAL_GetTick>
 800094c:	6338      	str	r0, [r7, #48]	; 0x30
  unsigned long lst_time_motor = HAL_GetTick();
 800094e:	f000 fc39 	bl	80011c4 <HAL_GetTick>
 8000952:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsigned long lst_time_pomiar_INA = HAL_GetTick();
 8000954:	f000 fc36 	bl	80011c4 <HAL_GetTick>
 8000958:	62b8      	str	r0, [r7, #40]	; 0x28
  unsigned long lst_time_input = HAL_GetTick();
 800095a:	f000 fc33 	bl	80011c4 <HAL_GetTick>
 800095e:	6278      	str	r0, [r7, #36]	; 0x24

  //DEBOUNCING INPUTS
  int counter_otw = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  int counter_zam = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  int counter_button = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]


  //ZABEZPIECZNIA
  int work_time = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  int max_current_counter = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
  int incorrect_voltage_counter = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]


  //USTALENIE STANU POCZĄTKOWEGO
  if(get_state(kran_zam)) stan = zamkniete;
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff fd6d 	bl	8000458 <get_state>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d003      	beq.n	800098c <main+0xb0>
 8000984:	2301      	movs	r3, #1
 8000986:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800098a:	e00c      	b.n	80009a6 <main+0xca>
  else if(get_state(kran_otw)) stan = otwarte;
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff fd63 	bl	8000458 <get_state>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d003      	beq.n	80009a0 <main+0xc4>
 8000998:	2302      	movs	r3, #2
 800099a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800099e:	e002      	b.n	80009a6 <main+0xca>
  else stan = pomiedzy;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  lst_stan = stan;
 80009a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80009aa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

  //ADC
  HAL_ADCEx_Calibration_Start(&hadc1);
 80009ae:	4891      	ldr	r0, [pc, #580]	; (8000bf4 <main+0x318>)
 80009b0:	f001 f862 	bl	8001a78 <HAL_ADCEx_Calibration_Start>


  //PWM
  HAL_TIM_Base_Start_IT(&htim2);
 80009b4:	4890      	ldr	r0, [pc, #576]	; (8000bf8 <main+0x31c>)
 80009b6:	f003 fb11 	bl	8003fdc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009ba:	2100      	movs	r1, #0
 80009bc:	488e      	ldr	r0, [pc, #568]	; (8000bf8 <main+0x31c>)
 80009be:	f003 fbaf 	bl	8004120 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80009c2:	2104      	movs	r1, #4
 80009c4:	488c      	ldr	r0, [pc, #560]	; (8000bf8 <main+0x31c>)
 80009c6:	f003 fbab 	bl	8004120 <HAL_TIM_PWM_Start>


  //INA 219
  uint16_t vbus, current;

  vbus = INA219_ReadBusVoltage(&ina219);
 80009ca:	4889      	ldr	r0, [pc, #548]	; (8000bf0 <main+0x314>)
 80009cc:	f7ff fc04 	bl	80001d8 <INA219_ReadBusVoltage>
 80009d0:	4603      	mov	r3, r0
 80009d2:	817b      	strh	r3, [r7, #10]
  current = INA219_ReadCurrent(&ina219);
 80009d4:	4886      	ldr	r0, [pc, #536]	; (8000bf0 <main+0x314>)
 80009d6:	f7ff fc23 	bl	8000220 <INA219_ReadCurrent>
 80009da:	4603      	mov	r3, r0
 80009dc:	813b      	strh	r3, [r7, #8]


  while (1)
  {
	  // SPRAWDZANIE WEJŚĆ
	  if(HAL_GetTick() - lst_time_input > 2)
 80009de:	f000 fbf1 	bl	80011c4 <HAL_GetTick>
 80009e2:	4602      	mov	r2, r0
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d94b      	bls.n	8000a84 <main+0x1a8>
	  {

		  HAL_IWDG_Refresh(&hiwdg);
 80009ec:	4883      	ldr	r0, [pc, #524]	; (8000bfc <main+0x320>)
 80009ee:	f002 fd6a 	bl	80034c6 <HAL_IWDG_Refresh>

		  lst_time_input = HAL_GetTick();
 80009f2:	f000 fbe7 	bl	80011c4 <HAL_GetTick>
 80009f6:	6278      	str	r0, [r7, #36]	; 0x24

		  if(get_state(kran_zam) && (stan == zamykanie || stan == pomiedzy)) counter_zam ++;
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff fd2d 	bl	8000458 <get_state>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00b      	beq.n	8000a1c <main+0x140>
 8000a04:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	d003      	beq.n	8000a14 <main+0x138>
 8000a0c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d103      	bne.n	8000a1c <main+0x140>
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	3301      	adds	r3, #1
 8000a18:	61fb      	str	r3, [r7, #28]
 8000a1a:	e001      	b.n	8000a20 <main+0x144>
		  else counter_zam = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]

		  if(get_state(kran_otw) && (stan == otwieranie || stan == pomiedzy)) counter_otw ++;
 8000a20:	2001      	movs	r0, #1
 8000a22:	f7ff fd19 	bl	8000458 <get_state>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d00b      	beq.n	8000a44 <main+0x168>
 8000a2c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000a30:	2b03      	cmp	r3, #3
 8000a32:	d003      	beq.n	8000a3c <main+0x160>
 8000a34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d103      	bne.n	8000a44 <main+0x168>
 8000a3c:	6a3b      	ldr	r3, [r7, #32]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
 8000a42:	e001      	b.n	8000a48 <main+0x16c>
		  else counter_otw = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]

		  if(get_state(button) && !button_flag) counter_button++;
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f7ff fd05 	bl	8000458 <get_state>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d009      	beq.n	8000a68 <main+0x18c>
 8000a54:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000a58:	f083 0301 	eor.w	r3, r3, #1
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d002      	beq.n	8000a68 <main+0x18c>
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	3301      	adds	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
		  if(!get_state(button) && counter_button < 49) counter_button = 0;
 8000a68:	2002      	movs	r0, #2
 8000a6a:	f7ff fcf5 	bl	8000458 <get_state>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	f083 0301 	eor.w	r3, r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d004      	beq.n	8000a84 <main+0x1a8>
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	2b30      	cmp	r3, #48	; 0x30
 8000a7e:	dc01      	bgt.n	8000a84 <main+0x1a8>
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
	  }


	  //USTAWIENIE STANÓW WEJŚĆ
	  if(counter_zam > 30)
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	2b1e      	cmp	r3, #30
 8000a88:	dd09      	ble.n	8000a9e <main+0x1c2>
	  {
		  work_time = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
		  counter_zam = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
		  motor(zamkniete);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f7ff fd1c 	bl	80004d0 <motor>
		  stan = zamkniete;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	  }
	  if(counter_otw > 30)
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
 8000aa0:	2b1e      	cmp	r3, #30
 8000aa2:	dd09      	ble.n	8000ab8 <main+0x1dc>
	  {
		  work_time = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
		  counter_otw = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
		  motor(otwarte);
 8000aac:	2002      	movs	r0, #2
 8000aae:	f7ff fd0f 	bl	80004d0 <motor>
		  stan = otwarte;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	  }

	  //!get_state  ponieważ wciśnięcie przycisku uznane dopiero po jego puszczeniu
	  if(counter_button > 50 && !get_state(button))
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	2b32      	cmp	r3, #50	; 0x32
 8000abc:	dd0f      	ble.n	8000ade <main+0x202>
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f7ff fcca 	bl	8000458 <get_state>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	f083 0301 	eor.w	r3, r3, #1
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d006      	beq.n	8000ade <main+0x202>
	  {
		  counter_button = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
		  button_flag = 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		  work_time = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
	  }


// TRYB AUTOMATYCZNY

	  if(tryb == automatic)
 8000ade:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d137      	bne.n	8000b56 <main+0x27a>
	  {
		  //POMIAR Z FOTO-REZYSTORA
		  if(stan != otwieranie && stan != zamykanie && ((HAL_GetTick() - lst_time_pomiar) > 100))
 8000ae6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d011      	beq.n	8000b12 <main+0x236>
 8000aee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	d00d      	beq.n	8000b12 <main+0x236>
 8000af6:	f000 fb65 	bl	80011c4 <HAL_GetTick>
 8000afa:	4602      	mov	r2, r0
 8000afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	2b64      	cmp	r3, #100	; 0x64
 8000b02:	d906      	bls.n	8000b12 <main+0x236>
		  {
			  lst_time_pomiar = HAL_GetTick();
 8000b04:	f000 fb5e 	bl	80011c4 <HAL_GetTick>
 8000b08:	6378      	str	r0, [r7, #52]	; 0x34
			  pomiar_foto(&pora_dnia);
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fd41 	bl	8000594 <pomiar_foto>

		  }

		  // ROZPOCZYNANIE ZAMYKANIA LUB OTWIERANIA
		  if((stan == otwarte || stan == pomiedzy) && pora_dnia == noc)
 8000b12:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d003      	beq.n	8000b22 <main+0x246>
 8000b1a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d108      	bne.n	8000b34 <main+0x258>
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d105      	bne.n	8000b34 <main+0x258>
		  {
			  motor(zamykanie);
 8000b28:	2004      	movs	r0, #4
 8000b2a:	f7ff fcd1 	bl	80004d0 <motor>
			  stan = zamykanie;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		  }
		  if((stan == zamkniete || stan == pomiedzy) && pora_dnia == dzien)
 8000b34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d003      	beq.n	8000b44 <main+0x268>
 8000b3c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d108      	bne.n	8000b56 <main+0x27a>
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d105      	bne.n	8000b56 <main+0x27a>
		  {
			  motor(otwieranie);
 8000b4a:	2003      	movs	r0, #3
 8000b4c:	f7ff fcc0 	bl	80004d0 <motor>
			  stan = otwieranie;
 8000b50:	2303      	movs	r3, #3
 8000b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b



// TRYB MANUALNY

	  if(tryb == manual && (HAL_GetTick() - lst_time_manual >  150000))   // 2.5 min : czas działania trybu manualnego
 8000b56:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d110      	bne.n	8000b80 <main+0x2a4>
 8000b5e:	f000 fb31 	bl	80011c4 <HAL_GetTick>
 8000b62:	4602      	mov	r2, r0
 8000b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	4a25      	ldr	r2, [pc, #148]	; (8000c00 <main+0x324>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d908      	bls.n	8000b80 <main+0x2a4>
	  {
		  tryb = automatic;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7a:	481b      	ldr	r0, [pc, #108]	; (8000be8 <main+0x30c>)
 8000b7c:	f001 faa9 	bl	80020d2 <HAL_GPIO_WritePin>
	  }



	  if(button_flag)  //debouncing
 8000b80:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d063      	beq.n	8000c50 <main+0x374>
	  {
		  lst_time_manual = HAL_GetTick();
 8000b88:	f000 fb1c 	bl	80011c4 <HAL_GetTick>
 8000b8c:	6338      	str	r0, [r7, #48]	; 0x30
		  tryb = manual;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9a:	4813      	ldr	r0, [pc, #76]	; (8000be8 <main+0x30c>)
 8000b9c:	f001 fa99 	bl	80020d2 <HAL_GPIO_WritePin>

		  if(stan == otwieranie)
 8000ba0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d109      	bne.n	8000bbc <main+0x2e0>
		  {
			  motor(pomiedzy);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff fc91 	bl	80004d0 <motor>
			  stan = pomiedzy;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			  lst_stan = otwieranie;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8000bba:	e046      	b.n	8000c4a <main+0x36e>
		  }

		  else if(stan == zamykanie)
 8000bbc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d109      	bne.n	8000bd8 <main+0x2fc>
		  {
			  motor(pomiedzy);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff fc83 	bl	80004d0 <motor>
			  stan = pomiedzy;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			  lst_stan = zamykanie;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8000bd6:	e038      	b.n	8000c4a <main+0x36e>
		  }

		  else if(stan == zamkniete)
 8000bd8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d111      	bne.n	8000c04 <main+0x328>
		  {
			  stan = otwieranie;
 8000be0:	2303      	movs	r3, #3
 8000be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000be6:	e030      	b.n	8000c4a <main+0x36e>
 8000be8:	40011000 	.word	0x40011000
 8000bec:	20000068 	.word	0x20000068
 8000bf0:	200000c8 	.word	0x200000c8
 8000bf4:	20000030 	.word	0x20000030
 8000bf8:	200000d0 	.word	0x200000d0
 8000bfc:	200000bc 	.word	0x200000bc
 8000c00:	000249f0 	.word	0x000249f0
		  }

		  else if(stan == otwarte)
 8000c04:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d103      	bne.n	8000c14 <main+0x338>
		  {
			  stan = zamykanie;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000c12:	e01a      	b.n	8000c4a <main+0x36e>
		  }

		  else if(stan == pomiedzy && (lst_stan == otwieranie || lst_stan == pomiedzy))
 8000c14:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10b      	bne.n	8000c34 <main+0x358>
 8000c1c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d003      	beq.n	8000c2c <main+0x350>
 8000c24:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d103      	bne.n	8000c34 <main+0x358>
		  {
			  stan = zamykanie;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000c32:	e00a      	b.n	8000c4a <main+0x36e>
		  }

		  else if(stan == pomiedzy && lst_stan == zamykanie)
 8000c34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d106      	bne.n	8000c4a <main+0x36e>
 8000c3c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d102      	bne.n	8000c4a <main+0x36e>
		  {
			  stan = otwieranie;
 8000c44:	2303      	movs	r3, #3
 8000c46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		  }

		  button_flag = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38




// OBS�?UGA SILNIKA
	  if((HAL_GetTick() - lst_time_motor > 15) && (stan == otwieranie || stan == zamykanie))
 8000c50:	f000 fab8 	bl	80011c4 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b0f      	cmp	r3, #15
 8000c5c:	d912      	bls.n	8000c84 <main+0x3a8>
 8000c5e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d003      	beq.n	8000c6e <main+0x392>
 8000c66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	d10a      	bne.n	8000c84 <main+0x3a8>
	  {
		  lst_time_motor = HAL_GetTick();
 8000c6e:	f000 faa9 	bl	80011c4 <HAL_GetTick>
 8000c72:	62f8      	str	r0, [r7, #44]	; 0x2c
		  motor(stan);
 8000c74:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fc29 	bl	80004d0 <motor>
		  work_time ++;
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]




// ZABEZPIECZENIA
	  if(stan != otwieranie && stan != zamykanie) work_time = 0;
 8000c84:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d005      	beq.n	8000c98 <main+0x3bc>
 8000c8c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d001      	beq.n	8000c98 <main+0x3bc>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

	  //pomiar prądu i napięcia
	  if(HAL_GetTick() - lst_time_pomiar_INA > 5)
 8000c98:	f000 fa94 	bl	80011c4 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	2b05      	cmp	r3, #5
 8000ca4:	d929      	bls.n	8000cfa <main+0x41e>
	  {
		  lst_time_pomiar_INA = HAL_GetTick();
 8000ca6:	f000 fa8d 	bl	80011c4 <HAL_GetTick>
 8000caa:	62b8      	str	r0, [r7, #40]	; 0x28
		  vbus = INA219_ReadBusVoltage(&ina219);
 8000cac:	4834      	ldr	r0, [pc, #208]	; (8000d80 <main+0x4a4>)
 8000cae:	f7ff fa93 	bl	80001d8 <INA219_ReadBusVoltage>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	817b      	strh	r3, [r7, #10]
		  current = INA219_ReadCurrent(&ina219);
 8000cb6:	4832      	ldr	r0, [pc, #200]	; (8000d80 <main+0x4a4>)
 8000cb8:	f7ff fab2 	bl	8000220 <INA219_ReadCurrent>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	813b      	strh	r3, [r7, #8]

		  if(work_time > 40 && current > 2700)  //jeżeli po 200 ms prąd > 2500 mA
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	2b28      	cmp	r3, #40	; 0x28
 8000cc4:	dd08      	ble.n	8000cd8 <main+0x3fc>
 8000cc6:	893b      	ldrh	r3, [r7, #8]
 8000cc8:	f640 228c 	movw	r2, #2700	; 0xa8c
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d903      	bls.n	8000cd8 <main+0x3fc>
		  {
			  max_current_counter ++;
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	e001      	b.n	8000cdc <main+0x400>
		  }
		  else max_current_counter = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]


		  if(vbus > 13500 || vbus < 8000)
 8000cdc:	897b      	ldrh	r3, [r7, #10]
 8000cde:	f243 42bc 	movw	r2, #13500	; 0x34bc
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d803      	bhi.n	8000cee <main+0x412>
 8000ce6:	897b      	ldrh	r3, [r7, #10]
 8000ce8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000cec:	d203      	bcs.n	8000cf6 <main+0x41a>
		  {
			  incorrect_voltage_counter ++;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	e001      	b.n	8000cfa <main+0x41e>
		  }
		  else incorrect_voltage_counter = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]

	  }



	  if(work_time > 11000)   // czas pracy w sekundach    (work_time * 15)/1000
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8000d00:	4293      	cmp	r3, r2
 8000d02:	dd0a      	ble.n	8000d1a <main+0x43e>
	  {
		  error_led(to_long_run_time);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f7ff fca5 	bl	8000654 <error_led>
		  motor(pomiedzy);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff fbe0 	bl	80004d0 <motor>
		  work_time = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
		  stan = pomiedzy;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	  }




	  if(max_current_counter > 10)
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	2b0a      	cmp	r3, #10
 8000d1e:	dd1d      	ble.n	8000d5c <main+0x480>
	  {
		  if(stan == zamykanie)
 8000d20:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d24:	2b04      	cmp	r3, #4
 8000d26:	d10c      	bne.n	8000d42 <main+0x466>
		  {
			  work_time = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
			  counter_zam = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
			  max_current_counter = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
			  motor(zamkniete);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f7ff fbcb 	bl	80004d0 <motor>
			  stan = zamkniete;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000d40:	e00c      	b.n	8000d5c <main+0x480>
		  }
		  else{
			  error_led(to_high_current);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff fc86 	bl	8000654 <error_led>
			  motor(pomiedzy);
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff fbc1 	bl	80004d0 <motor>
			  work_time = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
			  stan = pomiedzy;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			  max_current_counter = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
		  }
	  }


	  if(incorrect_voltage_counter > 100)        // nieodpowiedznie napięcie [mV]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b64      	cmp	r3, #100	; 0x64
 8000d60:	f77f ae3d 	ble.w	80009de <main+0x102>
	  {
		  error_led(incorrect_voltage);
 8000d64:	2002      	movs	r0, #2
 8000d66:	f7ff fc75 	bl	8000654 <error_led>
		  motor(pomiedzy);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff fbb0 	bl	80004d0 <motor>
		  work_time = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
		  stan = pomiedzy;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		  incorrect_voltage_counter = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
	  if(HAL_GetTick() - lst_time_input > 2)
 8000d7e:	e62e      	b.n	80009de <main+0x102>
 8000d80:	200000c8 	.word	0x200000c8

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b094      	sub	sp, #80	; 0x50
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d8e:	2228      	movs	r2, #40	; 0x28
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 fd94 	bl	80048c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000db4:	2309      	movs	r3, #9
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dd4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 fb80 	bl	80034e4 <HAL_RCC_OscConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000dea:	f000 f828 	bl	8000e3e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dee:	230f      	movs	r3, #15
 8000df0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2102      	movs	r1, #2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f002 fdec 	bl	80039e8 <HAL_RCC_ClockConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e16:	f000 f812 	bl	8000e3e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e22:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 ff6c 	bl	8003d04 <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e32:	f000 f804 	bl	8000e3e <Error_Handler>
  }
}
 8000e36:	bf00      	nop
 8000e38:	3750      	adds	r7, #80	; 0x50
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e42:	b672      	cpsid	i
}
 8000e44:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <Error_Handler+0x8>

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6193      	str	r3, [r2, #24]
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <HAL_MspInit+0x5c>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_MspInit+0x60>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_MspInit+0x60>)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010000 	.word	0x40010000

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr

08000ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef2:	f000 f955 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
	...

08000f08 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]
 8000f26:	615a      	str	r2, [r3, #20]
 8000f28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <MX_TIM2_Init+0xc4>)
 8000f2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <MX_TIM2_Init+0xc4>)
 8000f34:	2247      	movs	r2, #71	; 0x47
 8000f36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <MX_TIM2_Init+0xc4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <MX_TIM2_Init+0xc4>)
 8000f40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <MX_TIM2_Init+0xc4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <MX_TIM2_Init+0xc4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f52:	481e      	ldr	r0, [pc, #120]	; (8000fcc <MX_TIM2_Init+0xc4>)
 8000f54:	f003 f894 	bl	8004080 <HAL_TIM_PWM_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000f5e:	f7ff ff6e 	bl	8000e3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4816      	ldr	r0, [pc, #88]	; (8000fcc <MX_TIM2_Init+0xc4>)
 8000f72:	f003 fc47 	bl	8004804 <HAL_TIMEx_MasterConfigSynchronization>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000f7c:	f7ff ff5f 	bl	8000e3e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f80:	2360      	movs	r3, #96	; 0x60
 8000f82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	4619      	mov	r1, r3
 8000f96:	480d      	ldr	r0, [pc, #52]	; (8000fcc <MX_TIM2_Init+0xc4>)
 8000f98:	f003 f964 	bl	8004264 <HAL_TIM_PWM_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000fa2:	f7ff ff4c 	bl	8000e3e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2204      	movs	r2, #4
 8000faa:	4619      	mov	r1, r3
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <MX_TIM2_Init+0xc4>)
 8000fae:	f003 f959 	bl	8004264 <HAL_TIM_PWM_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000fb8:	f7ff ff41 	bl	8000e3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <MX_TIM2_Init+0xc4>)
 8000fbe:	f000 f823 	bl	8001008 <HAL_TIM_MspPostInit>

}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200000d0 	.word	0x200000d0

08000fd0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe0:	d10b      	bne.n	8000ffa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_TIM_PWM_MspInit+0x34>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_TIM_PWM_MspInit+0x34>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	61d3      	str	r3, [r2, #28]
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_TIM_PWM_MspInit+0x34>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001026:	d142      	bne.n	80010ae <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <HAL_TIM_MspPostInit+0xb0>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a22      	ldr	r2, [pc, #136]	; (80010b8 <HAL_TIM_MspPostInit+0xb0>)
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <HAL_TIM_MspPostInit+0xb0>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_TIM_MspPostInit+0xb0>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_TIM_MspPostInit+0xb0>)
 8001046:	f043 0308 	orr.w	r3, r3, #8
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <HAL_TIM_MspPostInit+0xb0>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2302      	movs	r3, #2
 8001064:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4813      	ldr	r0, [pc, #76]	; (80010bc <HAL_TIM_MspPostInit+0xb4>)
 800106e:	f000 fe95 	bl	8001d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001072:	2308      	movs	r3, #8
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2302      	movs	r3, #2
 800107c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	480e      	ldr	r0, [pc, #56]	; (80010c0 <HAL_TIM_MspPostInit+0xb8>)
 8001086:	f000 fe89 	bl	8001d9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_TIM_MspPostInit+0xbc>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <HAL_TIM_MspPostInit+0xbc>)
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	; 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010800 	.word	0x40010800
 80010c0:	40010c00 	.word	0x40010c00
 80010c4:	40010000 	.word	0x40010000

080010c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c8:	f7ff ff17 	bl	8000efa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010ce:	490c      	ldr	r1, [pc, #48]	; (8001100 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010d0:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a09      	ldr	r2, [pc, #36]	; (8001108 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010e4:	4c09      	ldr	r4, [pc, #36]	; (800110c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f2:	f003 fbed 	bl	80048d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f6:	f7ff fbf1 	bl	80008dc <main>
  bx lr
 80010fa:	4770      	bx	lr
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001100:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001104:	08004978 	.word	0x08004978
  ldr r2, =_sbss
 8001108:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800110c:	2000011c 	.word	0x2000011c

08001110 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC1_2_IRQHandler>
	...

08001114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_Init+0x28>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_Init+0x28>)
 800111e:	f043 0310 	orr.w	r3, r3, #16
 8001122:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 fe05 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	2001      	movs	r0, #1
 800112c:	f000 f808 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff fe8a 	bl	8000e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40022000 	.word	0x40022000

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x54>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fe0f 	bl	8001d82 <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 fde5 	bl	8001d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <HAL_InitTick+0x5c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000000 	.word	0x20000000
 8001198:	20000008 	.word	0x20000008
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_IncTick+0x1c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_IncTick+0x20>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a03      	ldr	r2, [pc, #12]	; (80011c0 <HAL_IncTick+0x20>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000118 	.word	0x20000118

080011c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b02      	ldr	r3, [pc, #8]	; (80011d4 <HAL_GetTick+0x10>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	20000118 	.word	0x20000118

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff fff0 	bl	80011c4 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f0:	d005      	beq.n	80011fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_Delay+0x44>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fe:	bf00      	nop
 8001200:	f7ff ffe0 	bl	80011c4 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <HAL_Delay+0x28>
  {
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008

08001220 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e0be      	b.n	80013c0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124c:	2b00      	cmp	r3, #0
 800124e:	d109      	bne.n	8001264 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff f8be 	bl	80003e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 fbc5 	bl	80019f4 <ADC_ConversionStop_Disable>
 800126a:	4603      	mov	r3, r0
 800126c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	f040 8099 	bne.w	80013ae <HAL_ADC_Init+0x18e>
 800127c:	7dfb      	ldrb	r3, [r7, #23]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 8095 	bne.w	80013ae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800128c:	f023 0302 	bic.w	r3, r3, #2
 8001290:	f043 0202 	orr.w	r2, r3, #2
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012a0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7b1b      	ldrb	r3, [r3, #12]
 80012a6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012a8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012b8:	d003      	beq.n	80012c2 <HAL_ADC_Init+0xa2>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d102      	bne.n	80012c8 <HAL_ADC_Init+0xa8>
 80012c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c6:	e000      	b.n	80012ca <HAL_ADC_Init+0xaa>
 80012c8:	2300      	movs	r3, #0
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7d1b      	ldrb	r3, [r3, #20]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d119      	bne.n	800130c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	7b1b      	ldrb	r3, [r3, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d109      	bne.n	80012f4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	035a      	lsls	r2, r3, #13
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	e00b      	b.n	800130c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	f043 0220 	orr.w	r2, r3, #32
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001304:	f043 0201 	orr.w	r2, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	430a      	orrs	r2, r1
 800131e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <HAL_ADC_Init+0x1a8>)
 8001328:	4013      	ands	r3, r2
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	68b9      	ldr	r1, [r7, #8]
 8001330:	430b      	orrs	r3, r1
 8001332:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800133c:	d003      	beq.n	8001346 <HAL_ADC_Init+0x126>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d104      	bne.n	8001350 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	3b01      	subs	r3, #1
 800134c:	051b      	lsls	r3, r3, #20
 800134e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	430a      	orrs	r2, r1
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_ADC_Init+0x1ac>)
 800136c:	4013      	ands	r3, r2
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	429a      	cmp	r2, r3
 8001372:	d10b      	bne.n	800138c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	f023 0303 	bic.w	r3, r3, #3
 8001382:	f043 0201 	orr.w	r2, r3, #1
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800138a:	e018      	b.n	80013be <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001390:	f023 0312 	bic.w	r3, r3, #18
 8001394:	f043 0210 	orr.w	r2, r3, #16
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	f043 0201 	orr.w	r2, r3, #1
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013ac:	e007      	b.n	80013be <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b2:	f043 0210 	orr.w	r2, r3, #16
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013be:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	ffe1f7fd 	.word	0xffe1f7fd
 80013cc:	ff1f0efe 	.word	0xff1f0efe

080013d0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_Start+0x1a>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e098      	b.n	800151c <HAL_ADC_Start+0x14c>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 faa4 	bl	8001940 <ADC_Enable>
 80013f8:	4603      	mov	r3, r0
 80013fa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f040 8087 	bne.w	8001512 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a41      	ldr	r2, [pc, #260]	; (8001524 <HAL_ADC_Start+0x154>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d105      	bne.n	800142e <HAL_ADC_Start+0x5e>
 8001422:	4b41      	ldr	r3, [pc, #260]	; (8001528 <HAL_ADC_Start+0x158>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d115      	bne.n	800145a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001432:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001444:	2b00      	cmp	r3, #0
 8001446:	d026      	beq.n	8001496 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001450:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001458:	e01d      	b.n	8001496 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a2f      	ldr	r2, [pc, #188]	; (8001528 <HAL_ADC_Start+0x158>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d004      	beq.n	800147a <HAL_ADC_Start+0xaa>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a2b      	ldr	r2, [pc, #172]	; (8001524 <HAL_ADC_Start+0x154>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d10d      	bne.n	8001496 <HAL_ADC_Start+0xc6>
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <HAL_ADC_Start+0x158>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800148e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	f023 0206 	bic.w	r2, r3, #6
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ae:	e002      	b.n	80014b6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f06f 0202 	mvn.w	r2, #2
 80014c6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014d6:	d113      	bne.n	8001500 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014dc:	4a11      	ldr	r2, [pc, #68]	; (8001524 <HAL_ADC_Start+0x154>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d105      	bne.n	80014ee <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_ADC_Start+0x158>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d108      	bne.n	8001500 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	e00c      	b.n	800151a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	e003      	b.n	800151a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40012800 	.word	0x40012800
 8001528:	40012400 	.word	0x40012400

0800152c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001542:	f7ff fe3f 	bl	80011c4 <HAL_GetTick>
 8001546:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	f043 0220 	orr.w	r2, r3, #32
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e0d3      	b.n	8001716 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d131      	bne.n	80015e0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001582:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001586:	2b00      	cmp	r3, #0
 8001588:	d12a      	bne.n	80015e0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800158a:	e021      	b.n	80015d0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001592:	d01d      	beq.n	80015d0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d007      	beq.n	80015aa <HAL_ADC_PollForConversion+0x7e>
 800159a:	f7ff fe13 	bl	80011c4 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d212      	bcs.n	80015d0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10b      	bne.n	80015d0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	f043 0204 	orr.w	r2, r3, #4
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0a2      	b.n	8001716 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0d6      	beq.n	800158c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015de:	e070      	b.n	80016c2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015e0:	4b4f      	ldr	r3, [pc, #316]	; (8001720 <HAL_ADC_PollForConversion+0x1f4>)
 80015e2:	681c      	ldr	r4, [r3, #0]
 80015e4:	2002      	movs	r0, #2
 80015e6:	f002 fc43 	bl	8003e70 <HAL_RCCEx_GetPeriphCLKFreq>
 80015ea:	4603      	mov	r3, r0
 80015ec:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6919      	ldr	r1, [r3, #16]
 80015f6:	4b4b      	ldr	r3, [pc, #300]	; (8001724 <HAL_ADC_PollForConversion+0x1f8>)
 80015f8:	400b      	ands	r3, r1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d118      	bne.n	8001630 <HAL_ADC_PollForConversion+0x104>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68d9      	ldr	r1, [r3, #12]
 8001604:	4b48      	ldr	r3, [pc, #288]	; (8001728 <HAL_ADC_PollForConversion+0x1fc>)
 8001606:	400b      	ands	r3, r1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d111      	bne.n	8001630 <HAL_ADC_PollForConversion+0x104>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6919      	ldr	r1, [r3, #16]
 8001612:	4b46      	ldr	r3, [pc, #280]	; (800172c <HAL_ADC_PollForConversion+0x200>)
 8001614:	400b      	ands	r3, r1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d108      	bne.n	800162c <HAL_ADC_PollForConversion+0x100>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68d9      	ldr	r1, [r3, #12]
 8001620:	4b43      	ldr	r3, [pc, #268]	; (8001730 <HAL_ADC_PollForConversion+0x204>)
 8001622:	400b      	ands	r3, r1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_ADC_PollForConversion+0x100>
 8001628:	2314      	movs	r3, #20
 800162a:	e020      	b.n	800166e <HAL_ADC_PollForConversion+0x142>
 800162c:	2329      	movs	r3, #41	; 0x29
 800162e:	e01e      	b.n	800166e <HAL_ADC_PollForConversion+0x142>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6919      	ldr	r1, [r3, #16]
 8001636:	4b3d      	ldr	r3, [pc, #244]	; (800172c <HAL_ADC_PollForConversion+0x200>)
 8001638:	400b      	ands	r3, r1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d106      	bne.n	800164c <HAL_ADC_PollForConversion+0x120>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68d9      	ldr	r1, [r3, #12]
 8001644:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <HAL_ADC_PollForConversion+0x204>)
 8001646:	400b      	ands	r3, r1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00d      	beq.n	8001668 <HAL_ADC_PollForConversion+0x13c>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6919      	ldr	r1, [r3, #16]
 8001652:	4b38      	ldr	r3, [pc, #224]	; (8001734 <HAL_ADC_PollForConversion+0x208>)
 8001654:	400b      	ands	r3, r1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d108      	bne.n	800166c <HAL_ADC_PollForConversion+0x140>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68d9      	ldr	r1, [r3, #12]
 8001660:	4b34      	ldr	r3, [pc, #208]	; (8001734 <HAL_ADC_PollForConversion+0x208>)
 8001662:	400b      	ands	r3, r1
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_ADC_PollForConversion+0x140>
 8001668:	2354      	movs	r3, #84	; 0x54
 800166a:	e000      	b.n	800166e <HAL_ADC_PollForConversion+0x142>
 800166c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001674:	e021      	b.n	80016ba <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167c:	d01a      	beq.n	80016b4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d007      	beq.n	8001694 <HAL_ADC_PollForConversion+0x168>
 8001684:	f7ff fd9e 	bl	80011c4 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d20f      	bcs.n	80016b4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d90b      	bls.n	80016b4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	f043 0204 	orr.w	r2, r3, #4
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e030      	b.n	8001716 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3301      	adds	r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d8d9      	bhi.n	8001676 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f06f 0212 	mvn.w	r2, #18
 80016ca:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016e6:	d115      	bne.n	8001714 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d111      	bne.n	8001714 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d105      	bne.n	8001714 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	f043 0201 	orr.w	r2, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	371c      	adds	r7, #28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd90      	pop	{r4, r7, pc}
 800171e:	bf00      	nop
 8001720:	20000000 	.word	0x20000000
 8001724:	24924924 	.word	0x24924924
 8001728:	00924924 	.word	0x00924924
 800172c:	12492492 	.word	0x12492492
 8001730:	00492492 	.word	0x00492492
 8001734:	00249249 	.word	0x00249249

08001738 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x20>
 800176c:	2302      	movs	r3, #2
 800176e:	e0dc      	b.n	800192a <HAL_ADC_ConfigChannel+0x1da>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b06      	cmp	r3, #6
 800177e:	d81c      	bhi.n	80017ba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	3b05      	subs	r3, #5
 8001792:	221f      	movs	r2, #31
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	4019      	ands	r1, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	3b05      	subs	r3, #5
 80017ac:	fa00 f203 	lsl.w	r2, r0, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34
 80017b8:	e03c      	b.n	8001834 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b0c      	cmp	r3, #12
 80017c0:	d81c      	bhi.n	80017fc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	3b23      	subs	r3, #35	; 0x23
 80017d4:	221f      	movs	r2, #31
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	4019      	ands	r1, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	3b23      	subs	r3, #35	; 0x23
 80017ee:	fa00 f203 	lsl.w	r2, r0, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	631a      	str	r2, [r3, #48]	; 0x30
 80017fa:	e01b      	b.n	8001834 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	3b41      	subs	r3, #65	; 0x41
 800180e:	221f      	movs	r2, #31
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	4019      	ands	r1, r3
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	3b41      	subs	r3, #65	; 0x41
 8001828:	fa00 f203 	lsl.w	r2, r0, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b09      	cmp	r3, #9
 800183a:	d91c      	bls.n	8001876 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68d9      	ldr	r1, [r3, #12]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	3b1e      	subs	r3, #30
 800184e:	2207      	movs	r2, #7
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	4019      	ands	r1, r3
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	6898      	ldr	r0, [r3, #8]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	3b1e      	subs	r3, #30
 8001868:	fa00 f203 	lsl.w	r2, r0, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	e019      	b.n	80018aa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6919      	ldr	r1, [r3, #16]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	2207      	movs	r2, #7
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	4019      	ands	r1, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	6898      	ldr	r0, [r3, #8]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	fa00 f203 	lsl.w	r2, r0, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b10      	cmp	r3, #16
 80018b0:	d003      	beq.n	80018ba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018b6:	2b11      	cmp	r3, #17
 80018b8:	d132      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_ADC_ConfigChannel+0x1e4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d125      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d126      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018e0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d11a      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_ADC_ConfigChannel+0x1e8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a13      	ldr	r2, [pc, #76]	; (800193c <HAL_ADC_ConfigChannel+0x1ec>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	0c9a      	lsrs	r2, r3, #18
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001900:	e002      	b.n	8001908 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	3b01      	subs	r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f9      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x1b2>
 800190e:	e007      	b.n	8001920 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	f043 0220 	orr.w	r2, r3, #32
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	40012400 	.word	0x40012400
 8001938:	20000000 	.word	0x20000000
 800193c:	431bde83 	.word	0x431bde83

08001940 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b01      	cmp	r3, #1
 800195c:	d040      	beq.n	80019e0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0201 	orr.w	r2, r2, #1
 800196c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800196e:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <ADC_Enable+0xac>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <ADC_Enable+0xb0>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	0c9b      	lsrs	r3, r3, #18
 800197a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800197c:	e002      	b.n	8001984 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	3b01      	subs	r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f9      	bne.n	800197e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800198a:	f7ff fc1b 	bl	80011c4 <HAL_GetTick>
 800198e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001990:	e01f      	b.n	80019d2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001992:	f7ff fc17 	bl	80011c4 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d918      	bls.n	80019d2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d011      	beq.n	80019d2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	f043 0210 	orr.w	r2, r3, #16
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	f043 0201 	orr.w	r2, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e007      	b.n	80019e2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d1d8      	bne.n	8001992 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000000 	.word	0x20000000
 80019f0:	431bde83 	.word	0x431bde83

080019f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d12e      	bne.n	8001a6c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0201 	bic.w	r2, r2, #1
 8001a1c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a1e:	f7ff fbd1 	bl	80011c4 <HAL_GetTick>
 8001a22:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a24:	e01b      	b.n	8001a5e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a26:	f7ff fbcd 	bl	80011c4 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d914      	bls.n	8001a5e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10d      	bne.n	8001a5e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	f043 0210 	orr.w	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e007      	b.n	8001a6e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d0dc      	beq.n	8001a26 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_ADCEx_Calibration_Start+0x1e>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e097      	b.n	8001bc6 <HAL_ADCEx_Calibration_Start+0x14e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffa8 	bl	80019f4 <ADC_ConversionStop_Disable>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff49 	bl	8001940 <ADC_Enable>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f040 8081 	bne.w	8001bbc <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ac2:	f023 0302 	bic.w	r3, r3, #2
 8001ac6:	f043 0202 	orr.w	r2, r3, #2
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ace:	4b40      	ldr	r3, [pc, #256]	; (8001bd0 <HAL_ADCEx_Calibration_Start+0x158>)
 8001ad0:	681c      	ldr	r4, [r3, #0]
 8001ad2:	2002      	movs	r0, #2
 8001ad4:	f002 f9cc 	bl	8003e70 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001ade:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001ae0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001ae2:	e002      	b.n	8001aea <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f9      	bne.n	8001ae4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0208 	orr.w	r2, r2, #8
 8001afe:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b00:	f7ff fb60 	bl	80011c4 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b06:	e01b      	b.n	8001b40 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b08:	f7ff fb5c 	bl	80011c4 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b0a      	cmp	r3, #10
 8001b14:	d914      	bls.n	8001b40 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00d      	beq.n	8001b40 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	f023 0312 	bic.w	r3, r3, #18
 8001b2c:	f043 0210 	orr.w	r2, r3, #16
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e042      	b.n	8001bc6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1dc      	bne.n	8001b08 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0204 	orr.w	r2, r2, #4
 8001b5c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b5e:	f7ff fb31 	bl	80011c4 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b64:	e01b      	b.n	8001b9e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b66:	f7ff fb2d 	bl	80011c4 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b0a      	cmp	r3, #10
 8001b72:	d914      	bls.n	8001b9e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00d      	beq.n	8001b9e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	f023 0312 	bic.w	r3, r3, #18
 8001b8a:	f043 0210 	orr.w	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e013      	b.n	8001bc6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1dc      	bne.n	8001b66 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	f023 0303 	bic.w	r3, r3, #3
 8001bb4:	f043 0201 	orr.w	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd90      	pop	{r4, r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	60d3      	str	r3, [r2, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <__NVIC_GetPriorityGrouping+0x18>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	f003 0307 	and.w	r3, r3, #7
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0a      	blt.n	8001c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	490c      	ldr	r1, [pc, #48]	; (8001c84 <__NVIC_SetPriority+0x4c>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c60:	e00a      	b.n	8001c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4908      	ldr	r1, [pc, #32]	; (8001c88 <__NVIC_SetPriority+0x50>)
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	0112      	lsls	r2, r2, #4
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	440b      	add	r3, r1
 8001c76:	761a      	strb	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f1c3 0307 	rsb	r3, r3, #7
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf28      	it	cs
 8001caa:	2304      	movcs	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d902      	bls.n	8001cbc <NVIC_EncodePriority+0x30>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3b03      	subs	r3, #3
 8001cba:	e000      	b.n	8001cbe <NVIC_EncodePriority+0x32>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	401a      	ands	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	4313      	orrs	r3, r2
         );
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f7ff ff90 	bl	8001c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff49 	bl	8001bd4 <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff5e 	bl	8001c1c <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff90 	bl	8001c8c <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5f 	bl	8001c38 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ffb0 	bl	8001cf0 <SysTick_Config>
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b08b      	sub	sp, #44	; 0x2c
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dae:	e169      	b.n	8002084 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001db0:	2201      	movs	r2, #1
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	f040 8158 	bne.w	800207e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4a9a      	ldr	r2, [pc, #616]	; (800203c <HAL_GPIO_Init+0x2a0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d05e      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001dd8:	4a98      	ldr	r2, [pc, #608]	; (800203c <HAL_GPIO_Init+0x2a0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d875      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001dde:	4a98      	ldr	r2, [pc, #608]	; (8002040 <HAL_GPIO_Init+0x2a4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d058      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001de4:	4a96      	ldr	r2, [pc, #600]	; (8002040 <HAL_GPIO_Init+0x2a4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d86f      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001dea:	4a96      	ldr	r2, [pc, #600]	; (8002044 <HAL_GPIO_Init+0x2a8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d052      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001df0:	4a94      	ldr	r2, [pc, #592]	; (8002044 <HAL_GPIO_Init+0x2a8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d869      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001df6:	4a94      	ldr	r2, [pc, #592]	; (8002048 <HAL_GPIO_Init+0x2ac>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d04c      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001dfc:	4a92      	ldr	r2, [pc, #584]	; (8002048 <HAL_GPIO_Init+0x2ac>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d863      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001e02:	4a92      	ldr	r2, [pc, #584]	; (800204c <HAL_GPIO_Init+0x2b0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d046      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001e08:	4a90      	ldr	r2, [pc, #576]	; (800204c <HAL_GPIO_Init+0x2b0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d85d      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001e0e:	2b12      	cmp	r3, #18
 8001e10:	d82a      	bhi.n	8001e68 <HAL_GPIO_Init+0xcc>
 8001e12:	2b12      	cmp	r3, #18
 8001e14:	d859      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001e16:	a201      	add	r2, pc, #4	; (adr r2, 8001e1c <HAL_GPIO_Init+0x80>)
 8001e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1c:	08001e97 	.word	0x08001e97
 8001e20:	08001e71 	.word	0x08001e71
 8001e24:	08001e83 	.word	0x08001e83
 8001e28:	08001ec5 	.word	0x08001ec5
 8001e2c:	08001ecb 	.word	0x08001ecb
 8001e30:	08001ecb 	.word	0x08001ecb
 8001e34:	08001ecb 	.word	0x08001ecb
 8001e38:	08001ecb 	.word	0x08001ecb
 8001e3c:	08001ecb 	.word	0x08001ecb
 8001e40:	08001ecb 	.word	0x08001ecb
 8001e44:	08001ecb 	.word	0x08001ecb
 8001e48:	08001ecb 	.word	0x08001ecb
 8001e4c:	08001ecb 	.word	0x08001ecb
 8001e50:	08001ecb 	.word	0x08001ecb
 8001e54:	08001ecb 	.word	0x08001ecb
 8001e58:	08001ecb 	.word	0x08001ecb
 8001e5c:	08001ecb 	.word	0x08001ecb
 8001e60:	08001e79 	.word	0x08001e79
 8001e64:	08001e8d 	.word	0x08001e8d
 8001e68:	4a79      	ldr	r2, [pc, #484]	; (8002050 <HAL_GPIO_Init+0x2b4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e6e:	e02c      	b.n	8001eca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	623b      	str	r3, [r7, #32]
          break;
 8001e76:	e029      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	623b      	str	r3, [r7, #32]
          break;
 8001e80:	e024      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	3308      	adds	r3, #8
 8001e88:	623b      	str	r3, [r7, #32]
          break;
 8001e8a:	e01f      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	330c      	adds	r3, #12
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	e01a      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d102      	bne.n	8001ea4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	623b      	str	r3, [r7, #32]
          break;
 8001ea2:	e013      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eac:	2308      	movs	r3, #8
 8001eae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	611a      	str	r2, [r3, #16]
          break;
 8001eb6:	e009      	b.n	8001ecc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	615a      	str	r2, [r3, #20]
          break;
 8001ec2:	e003      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	623b      	str	r3, [r7, #32]
          break;
 8001ec8:	e000      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          break;
 8001eca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2bff      	cmp	r3, #255	; 0xff
 8001ed0:	d801      	bhi.n	8001ed6 <HAL_GPIO_Init+0x13a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	e001      	b.n	8001eda <HAL_GPIO_Init+0x13e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2bff      	cmp	r3, #255	; 0xff
 8001ee0:	d802      	bhi.n	8001ee8 <HAL_GPIO_Init+0x14c>
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	e002      	b.n	8001eee <HAL_GPIO_Init+0x152>
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	3b08      	subs	r3, #8
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	210f      	movs	r1, #15
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	401a      	ands	r2, r3
 8001f00:	6a39      	ldr	r1, [r7, #32]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80b1 	beq.w	800207e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f1c:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a4c      	ldr	r2, [pc, #304]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6193      	str	r3, [r2, #24]
 8001f28:	4b4a      	ldr	r3, [pc, #296]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f34:	4a48      	ldr	r2, [pc, #288]	; (8002058 <HAL_GPIO_Init+0x2bc>)
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a40      	ldr	r2, [pc, #256]	; (800205c <HAL_GPIO_Init+0x2c0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_GPIO_Init+0x1ec>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a3f      	ldr	r2, [pc, #252]	; (8002060 <HAL_GPIO_Init+0x2c4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00d      	beq.n	8001f84 <HAL_GPIO_Init+0x1e8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a3e      	ldr	r2, [pc, #248]	; (8002064 <HAL_GPIO_Init+0x2c8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <HAL_GPIO_Init+0x1e4>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a3d      	ldr	r2, [pc, #244]	; (8002068 <HAL_GPIO_Init+0x2cc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_GPIO_Init+0x1e0>
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e006      	b.n	8001f8a <HAL_GPIO_Init+0x1ee>
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	e004      	b.n	8001f8a <HAL_GPIO_Init+0x1ee>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e002      	b.n	8001f8a <HAL_GPIO_Init+0x1ee>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <HAL_GPIO_Init+0x1ee>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8c:	f002 0203 	and.w	r2, r2, #3
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	4093      	lsls	r3, r2
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f9a:	492f      	ldr	r1, [pc, #188]	; (8002058 <HAL_GPIO_Init+0x2bc>)
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	492c      	ldr	r1, [pc, #176]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]
 8001fc0:	e006      	b.n	8001fd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4928      	ldr	r1, [pc, #160]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fdc:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	4922      	ldr	r1, [pc, #136]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60cb      	str	r3, [r1, #12]
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	491e      	ldr	r1, [pc, #120]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	4918      	ldr	r1, [pc, #96]	; (800206c <HAL_GPIO_Init+0x2d0>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
 8002010:	e006      	b.n	8002020 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	43db      	mvns	r3, r3
 800201a:	4914      	ldr	r1, [pc, #80]	; (800206c <HAL_GPIO_Init+0x2d0>)
 800201c:	4013      	ands	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d021      	beq.n	8002070 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_GPIO_Init+0x2d0>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	490e      	ldr	r1, [pc, #56]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
 8002038:	e021      	b.n	800207e <HAL_GPIO_Init+0x2e2>
 800203a:	bf00      	nop
 800203c:	10320000 	.word	0x10320000
 8002040:	10310000 	.word	0x10310000
 8002044:	10220000 	.word	0x10220000
 8002048:	10210000 	.word	0x10210000
 800204c:	10120000 	.word	0x10120000
 8002050:	10110000 	.word	0x10110000
 8002054:	40021000 	.word	0x40021000
 8002058:	40010000 	.word	0x40010000
 800205c:	40010800 	.word	0x40010800
 8002060:	40010c00 	.word	0x40010c00
 8002064:	40011000 	.word	0x40011000
 8002068:	40011400 	.word	0x40011400
 800206c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	43db      	mvns	r3, r3
 8002078:	4909      	ldr	r1, [pc, #36]	; (80020a0 <HAL_GPIO_Init+0x304>)
 800207a:	4013      	ands	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	3301      	adds	r3, #1
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	fa22 f303 	lsr.w	r3, r2, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	f47f ae8e 	bne.w	8001db0 <HAL_GPIO_Init+0x14>
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	372c      	adds	r7, #44	; 0x2c
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	40010400 	.word	0x40010400

080020a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e001      	b.n	80020c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	807b      	strh	r3, [r7, #2]
 80020de:	4613      	mov	r3, r2
 80020e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020e2:	787b      	ldrb	r3, [r7, #1]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e8:	887a      	ldrh	r2, [r7, #2]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020ee:	e003      	b.n	80020f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	041a      	lsls	r2, r3, #16
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002114:	887a      	ldrh	r2, [r7, #2]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4013      	ands	r3, r2
 800211a:	041a      	lsls	r2, r3, #16
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	43d9      	mvns	r1, r3
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	400b      	ands	r3, r1
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e12b      	b.n	800239e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe fb66 	bl	800082c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2224      	movs	r2, #36	; 0x24
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002186:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002196:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002198:	f001 fd6e 	bl	8003c78 <HAL_RCC_GetPCLK1Freq>
 800219c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4a81      	ldr	r2, [pc, #516]	; (80023a8 <HAL_I2C_Init+0x274>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d807      	bhi.n	80021b8 <HAL_I2C_Init+0x84>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4a80      	ldr	r2, [pc, #512]	; (80023ac <HAL_I2C_Init+0x278>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	bf94      	ite	ls
 80021b0:	2301      	movls	r3, #1
 80021b2:	2300      	movhi	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	e006      	b.n	80021c6 <HAL_I2C_Init+0x92>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4a7d      	ldr	r2, [pc, #500]	; (80023b0 <HAL_I2C_Init+0x27c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	bf94      	ite	ls
 80021c0:	2301      	movls	r3, #1
 80021c2:	2300      	movhi	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0e7      	b.n	800239e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4a78      	ldr	r2, [pc, #480]	; (80023b4 <HAL_I2C_Init+0x280>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0c9b      	lsrs	r3, r3, #18
 80021d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a6a      	ldr	r2, [pc, #424]	; (80023a8 <HAL_I2C_Init+0x274>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d802      	bhi.n	8002208 <HAL_I2C_Init+0xd4>
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3301      	adds	r3, #1
 8002206:	e009      	b.n	800221c <HAL_I2C_Init+0xe8>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	4a69      	ldr	r2, [pc, #420]	; (80023b8 <HAL_I2C_Init+0x284>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	3301      	adds	r3, #1
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	430b      	orrs	r3, r1
 8002222:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800222e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	495c      	ldr	r1, [pc, #368]	; (80023a8 <HAL_I2C_Init+0x274>)
 8002238:	428b      	cmp	r3, r1
 800223a:	d819      	bhi.n	8002270 <HAL_I2C_Init+0x13c>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1e59      	subs	r1, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fbb1 f3f3 	udiv	r3, r1, r3
 800224a:	1c59      	adds	r1, r3, #1
 800224c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002250:	400b      	ands	r3, r1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_I2C_Init+0x138>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1e59      	subs	r1, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fbb1 f3f3 	udiv	r3, r1, r3
 8002264:	3301      	adds	r3, #1
 8002266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800226a:	e051      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 800226c:	2304      	movs	r3, #4
 800226e:	e04f      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d111      	bne.n	800229c <HAL_I2C_Init+0x168>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1e58      	subs	r0, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	440b      	add	r3, r1
 8002286:	fbb0 f3f3 	udiv	r3, r0, r3
 800228a:	3301      	adds	r3, #1
 800228c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e012      	b.n	80022c2 <HAL_I2C_Init+0x18e>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1e58      	subs	r0, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	0099      	lsls	r1, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Init+0x196>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e022      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10e      	bne.n	80022f0 <HAL_I2C_Init+0x1bc>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1e58      	subs	r0, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	440b      	add	r3, r1
 80022e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ee:	e00f      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1e58      	subs	r0, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	0099      	lsls	r1, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	fbb0 f3f3 	udiv	r3, r0, r3
 8002306:	3301      	adds	r3, #1
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	6809      	ldr	r1, [r1, #0]
 8002314:	4313      	orrs	r3, r2
 8002316:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800233e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6911      	ldr	r1, [r2, #16]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68d2      	ldr	r2, [r2, #12]
 800234a:	4311      	orrs	r1, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	430b      	orrs	r3, r1
 8002352:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	000186a0 	.word	0x000186a0
 80023ac:	001e847f 	.word	0x001e847f
 80023b0:	003d08ff 	.word	0x003d08ff
 80023b4:	431bde83 	.word	0x431bde83
 80023b8:	10624dd3 	.word	0x10624dd3

080023bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	4608      	mov	r0, r1
 80023c6:	4611      	mov	r1, r2
 80023c8:	461a      	mov	r2, r3
 80023ca:	4603      	mov	r3, r0
 80023cc:	817b      	strh	r3, [r7, #10]
 80023ce:	460b      	mov	r3, r1
 80023d0:	813b      	strh	r3, [r7, #8]
 80023d2:	4613      	mov	r3, r2
 80023d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023d6:	f7fe fef5 	bl	80011c4 <HAL_GetTick>
 80023da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	f040 80d9 	bne.w	800259c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2319      	movs	r3, #25
 80023f0:	2201      	movs	r2, #1
 80023f2:	496d      	ldr	r1, [pc, #436]	; (80025a8 <HAL_I2C_Mem_Write+0x1ec>)
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fdef 	bl	8002fd8 <I2C_WaitOnFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002400:	2302      	movs	r3, #2
 8002402:	e0cc      	b.n	800259e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_I2C_Mem_Write+0x56>
 800240e:	2302      	movs	r3, #2
 8002410:	e0c5      	b.n	800259e <HAL_I2C_Mem_Write+0x1e2>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	d007      	beq.n	8002438 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002446:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2221      	movs	r2, #33	; 0x21
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2240      	movs	r2, #64	; 0x40
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a3a      	ldr	r2, [r7, #32]
 8002462:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002468:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4a4d      	ldr	r2, [pc, #308]	; (80025ac <HAL_I2C_Mem_Write+0x1f0>)
 8002478:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800247a:	88f8      	ldrh	r0, [r7, #6]
 800247c:	893a      	ldrh	r2, [r7, #8]
 800247e:	8979      	ldrh	r1, [r7, #10]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	4603      	mov	r3, r0
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fc26 	bl	8002cdc <I2C_RequestMemoryWrite>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d052      	beq.n	800253c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e081      	b.n	800259e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 feb4 	bl	800320c <I2C_WaitOnTXEFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00d      	beq.n	80024c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d107      	bne.n	80024c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e06b      	b.n	800259e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b04      	cmp	r3, #4
 8002502:	d11b      	bne.n	800253c <HAL_I2C_Mem_Write+0x180>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002508:	2b00      	cmp	r3, #0
 800250a:	d017      	beq.n	800253c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002532:	b29b      	uxth	r3, r3
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1aa      	bne.n	800249a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fea7 	bl	800329c <I2C_WaitOnBTFFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00d      	beq.n	8002570 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	2b04      	cmp	r3, #4
 800255a:	d107      	bne.n	800256c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e016      	b.n	800259e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	e000      	b.n	800259e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800259c:	2302      	movs	r3, #2
  }
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	00100002 	.word	0x00100002
 80025ac:	ffff0000 	.word	0xffff0000

080025b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08c      	sub	sp, #48	; 0x30
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	4608      	mov	r0, r1
 80025ba:	4611      	mov	r1, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	817b      	strh	r3, [r7, #10]
 80025c2:	460b      	mov	r3, r1
 80025c4:	813b      	strh	r3, [r7, #8]
 80025c6:	4613      	mov	r3, r2
 80025c8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025ce:	f7fe fdf9 	bl	80011c4 <HAL_GetTick>
 80025d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b20      	cmp	r3, #32
 80025de:	f040 8244 	bne.w	8002a6a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	2319      	movs	r3, #25
 80025e8:	2201      	movs	r2, #1
 80025ea:	4982      	ldr	r1, [pc, #520]	; (80027f4 <HAL_I2C_Mem_Read+0x244>)
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fcf3 	bl	8002fd8 <I2C_WaitOnFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80025f8:	2302      	movs	r3, #2
 80025fa:	e237      	b.n	8002a6c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_I2C_Mem_Read+0x5a>
 8002606:	2302      	movs	r3, #2
 8002608:	e230      	b.n	8002a6c <HAL_I2C_Mem_Read+0x4bc>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d007      	beq.n	8002630 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800263e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2222      	movs	r2, #34	; 0x22
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2240      	movs	r2, #64	; 0x40
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800265a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002660:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4a62      	ldr	r2, [pc, #392]	; (80027f8 <HAL_I2C_Mem_Read+0x248>)
 8002670:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002672:	88f8      	ldrh	r0, [r7, #6]
 8002674:	893a      	ldrh	r2, [r7, #8]
 8002676:	8979      	ldrh	r1, [r7, #10]
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	9301      	str	r3, [sp, #4]
 800267c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	4603      	mov	r3, r0
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fbc0 	bl	8002e08 <I2C_RequestMemoryRead>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e1ec      	b.n	8002a6c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002696:	2b00      	cmp	r3, #0
 8002698:	d113      	bne.n	80026c2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e1c0      	b.n	8002a44 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d11e      	bne.n	8002708 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026da:	b672      	cpsid	i
}
 80026dc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002702:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002704:	b662      	cpsie	i
}
 8002706:	e035      	b.n	8002774 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270c:	2b02      	cmp	r3, #2
 800270e:	d11e      	bne.n	800274e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800271e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002720:	b672      	cpsid	i
}
 8002722:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002748:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800274a:	b662      	cpsie	i
}
 800274c:	e012      	b.n	8002774 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800275c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002774:	e166      	b.n	8002a44 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	2b03      	cmp	r3, #3
 800277c:	f200 811f 	bhi.w	80029be <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	2b01      	cmp	r3, #1
 8002786:	d123      	bne.n	80027d0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fdcd 	bl	800332c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e167      	b.n	8002a6c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027ce:	e139      	b.n	8002a44 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d152      	bne.n	800287e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	2200      	movs	r2, #0
 80027e0:	4906      	ldr	r1, [pc, #24]	; (80027fc <HAL_I2C_Mem_Read+0x24c>)
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fbf8 	bl	8002fd8 <I2C_WaitOnFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e13c      	b.n	8002a6c <HAL_I2C_Mem_Read+0x4bc>
 80027f2:	bf00      	nop
 80027f4:	00100002 	.word	0x00100002
 80027f8:	ffff0000 	.word	0xffff0000
 80027fc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002800:	b672      	cpsid	i
}
 8002802:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002846:	b662      	cpsie	i
}
 8002848:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800287c:	e0e2      	b.n	8002a44 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002884:	2200      	movs	r2, #0
 8002886:	497b      	ldr	r1, [pc, #492]	; (8002a74 <HAL_I2C_Mem_Read+0x4c4>)
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fba5 	bl	8002fd8 <I2C_WaitOnFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0e9      	b.n	8002a6c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028a8:	b672      	cpsid	i
}
 80028aa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80028de:	4b66      	ldr	r3, [pc, #408]	; (8002a78 <HAL_I2C_Mem_Read+0x4c8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	08db      	lsrs	r3, r3, #3
 80028e4:	4a65      	ldr	r2, [pc, #404]	; (8002a7c <HAL_I2C_Mem_Read+0x4cc>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	0a1a      	lsrs	r2, r3, #8
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00da      	lsls	r2, r3, #3
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d118      	bne.n	8002936 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f043 0220 	orr.w	r2, r3, #32
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002926:	b662      	cpsie	i
}
 8002928:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e09a      	b.n	8002a6c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b04      	cmp	r3, #4
 8002942:	d1d9      	bne.n	80028f8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002986:	b662      	cpsie	i
}
 8002988:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029bc:	e042      	b.n	8002a44 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fcb2 	bl	800332c <I2C_WaitOnRXNEFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e04c      	b.n	8002a6c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d118      	bne.n	8002a44 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f47f ae94 	bne.w	8002776 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
  }
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3728      	adds	r7, #40	; 0x28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	00010004 	.word	0x00010004
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	14f8b589 	.word	0x14f8b589

08002a80 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	; 0x28
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a90:	f7fe fb98 	bl	80011c4 <HAL_GetTick>
 8002a94:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	f040 8111 	bne.w	8002cca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	2319      	movs	r3, #25
 8002aae:	2201      	movs	r2, #1
 8002ab0:	4988      	ldr	r1, [pc, #544]	; (8002cd4 <HAL_I2C_IsDeviceReady+0x254>)
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fa90 	bl	8002fd8 <I2C_WaitOnFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e104      	b.n	8002ccc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_I2C_IsDeviceReady+0x50>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e0fd      	b.n	8002ccc <HAL_I2C_IsDeviceReady+0x24c>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d007      	beq.n	8002af6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2224      	movs	r2, #36	; 0x24
 8002b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4a70      	ldr	r2, [pc, #448]	; (8002cd8 <HAL_I2C_IsDeviceReady+0x258>)
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b28:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 fa4e 	bl	8002fd8 <I2C_WaitOnFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00d      	beq.n	8002b5e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b50:	d103      	bne.n	8002b5a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e0b6      	b.n	8002ccc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b5e:	897b      	ldrh	r3, [r7, #10]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b6c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b6e:	f7fe fb29 	bl	80011c4 <HAL_GetTick>
 8002b72:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b98:	bf0c      	ite	eq
 8002b9a:	2301      	moveq	r3, #1
 8002b9c:	2300      	movne	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ba2:	e025      	b.n	8002bf0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ba4:	f7fe fb0e 	bl	80011c4 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d302      	bcc.n	8002bba <HAL_I2C_IsDeviceReady+0x13a>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d103      	bne.n	8002bc2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	22a0      	movs	r2, #160	; 0xa0
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2ba0      	cmp	r3, #160	; 0xa0
 8002bfa:	d005      	beq.n	8002c08 <HAL_I2C_IsDeviceReady+0x188>
 8002bfc:	7dfb      	ldrb	r3, [r7, #23]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d102      	bne.n	8002c08 <HAL_I2C_IsDeviceReady+0x188>
 8002c02:	7dbb      	ldrb	r3, [r7, #22]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0cd      	beq.n	8002ba4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d129      	bne.n	8002c72 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	2319      	movs	r3, #25
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4921      	ldr	r1, [pc, #132]	; (8002cd4 <HAL_I2C_IsDeviceReady+0x254>)
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f9c2 	bl	8002fd8 <I2C_WaitOnFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e036      	b.n	8002ccc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e02c      	b.n	8002ccc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c80:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c8a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	2319      	movs	r3, #25
 8002c92:	2201      	movs	r2, #1
 8002c94:	490f      	ldr	r1, [pc, #60]	; (8002cd4 <HAL_I2C_IsDeviceReady+0x254>)
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f99e 	bl	8002fd8 <I2C_WaitOnFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e012      	b.n	8002ccc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	f4ff af32 	bcc.w	8002b1a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
  }
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	00100002 	.word	0x00100002
 8002cd8:	ffff0000 	.word	0xffff0000

08002cdc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	4608      	mov	r0, r1
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4603      	mov	r3, r0
 8002cec:	817b      	strh	r3, [r7, #10]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	813b      	strh	r3, [r7, #8]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f960 	bl	8002fd8 <I2C_WaitOnFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00d      	beq.n	8002d3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d2c:	d103      	bne.n	8002d36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e05f      	b.n	8002dfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d3a:	897b      	ldrh	r3, [r7, #10]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	6a3a      	ldr	r2, [r7, #32]
 8002d4e:	492d      	ldr	r1, [pc, #180]	; (8002e04 <I2C_RequestMemoryWrite+0x128>)
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f9bb 	bl	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e04c      	b.n	8002dfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d78:	6a39      	ldr	r1, [r7, #32]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fa46 	bl	800320c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00d      	beq.n	8002da2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d107      	bne.n	8002d9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e02b      	b.n	8002dfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d105      	bne.n	8002db4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002da8:	893b      	ldrh	r3, [r7, #8]
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	611a      	str	r2, [r3, #16]
 8002db2:	e021      	b.n	8002df8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002db4:	893b      	ldrh	r3, [r7, #8]
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc4:	6a39      	ldr	r1, [r7, #32]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 fa20 	bl	800320c <I2C_WaitOnTXEFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00d      	beq.n	8002dee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d107      	bne.n	8002dea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e005      	b.n	8002dfa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dee:	893b      	ldrh	r3, [r7, #8]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	00010002 	.word	0x00010002

08002e08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	4608      	mov	r0, r1
 8002e12:	4611      	mov	r1, r2
 8002e14:	461a      	mov	r2, r3
 8002e16:	4603      	mov	r3, r0
 8002e18:	817b      	strh	r3, [r7, #10]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	813b      	strh	r3, [r7, #8]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f8c2 	bl	8002fd8 <I2C_WaitOnFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e68:	d103      	bne.n	8002e72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e0aa      	b.n	8002fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e76:	897b      	ldrh	r3, [r7, #10]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	6a3a      	ldr	r2, [r7, #32]
 8002e8a:	4952      	ldr	r1, [pc, #328]	; (8002fd4 <I2C_RequestMemoryRead+0x1cc>)
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f91d 	bl	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e097      	b.n	8002fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb4:	6a39      	ldr	r1, [r7, #32]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f9a8 	bl	800320c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00d      	beq.n	8002ede <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d107      	bne.n	8002eda <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e076      	b.n	8002fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ee4:	893b      	ldrh	r3, [r7, #8]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	611a      	str	r2, [r3, #16]
 8002eee:	e021      	b.n	8002f34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ef0:	893b      	ldrh	r3, [r7, #8]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f00:	6a39      	ldr	r1, [r7, #32]
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f982 	bl	800320c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00d      	beq.n	8002f2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d107      	bne.n	8002f26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e050      	b.n	8002fcc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f2a:	893b      	ldrh	r3, [r7, #8]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f36:	6a39      	ldr	r1, [r7, #32]
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f967 	bl	800320c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00d      	beq.n	8002f60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d107      	bne.n	8002f5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e035      	b.n	8002fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 f82b 	bl	8002fd8 <I2C_WaitOnFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00d      	beq.n	8002fa4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f96:	d103      	bne.n	8002fa0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e013      	b.n	8002fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fa4:	897b      	ldrh	r3, [r7, #10]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	6a3a      	ldr	r2, [r7, #32]
 8002fb8:	4906      	ldr	r1, [pc, #24]	; (8002fd4 <I2C_RequestMemoryRead+0x1cc>)
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f886 	bl	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	00010002 	.word	0x00010002

08002fd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fe8:	e048      	b.n	800307c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d044      	beq.n	800307c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff2:	f7fe f8e7 	bl	80011c4 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d302      	bcc.n	8003008 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d139      	bne.n	800307c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	0c1b      	lsrs	r3, r3, #16
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d10d      	bne.n	800302e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	43da      	mvns	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4013      	ands	r3, r2
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	e00c      	b.n	8003048 <I2C_WaitOnFlagUntilTimeout+0x70>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	43da      	mvns	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4013      	ands	r3, r2
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	429a      	cmp	r2, r3
 800304c:	d116      	bne.n	800307c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e023      	b.n	80030c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	0c1b      	lsrs	r3, r3, #16
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d10d      	bne.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	43da      	mvns	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	4013      	ands	r3, r2
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	e00c      	b.n	80030bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	43da      	mvns	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4013      	ands	r3, r2
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d093      	beq.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030da:	e071      	b.n	80031c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ea:	d123      	bne.n	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003104:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	f043 0204 	orr.w	r2, r3, #4
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e067      	b.n	8003204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313a:	d041      	beq.n	80031c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313c:	f7fe f842 	bl	80011c4 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	429a      	cmp	r2, r3
 800314a:	d302      	bcc.n	8003152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d136      	bne.n	80031c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b01      	cmp	r3, #1
 800315a:	d10c      	bne.n	8003176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	43da      	mvns	r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4013      	ands	r3, r2
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	bf14      	ite	ne
 800316e:	2301      	movne	r3, #1
 8003170:	2300      	moveq	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	e00b      	b.n	800318e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	43da      	mvns	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	4013      	ands	r3, r2
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf14      	ite	ne
 8003188:	2301      	movne	r3, #1
 800318a:	2300      	moveq	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d016      	beq.n	80031c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e021      	b.n	8003204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	0c1b      	lsrs	r3, r3, #16
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d10c      	bne.n	80031e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	43da      	mvns	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	4013      	ands	r3, r2
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf14      	ite	ne
 80031dc:	2301      	movne	r3, #1
 80031de:	2300      	moveq	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	e00b      	b.n	80031fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	43da      	mvns	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4013      	ands	r3, r2
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bf14      	ite	ne
 80031f6:	2301      	movne	r3, #1
 80031f8:	2300      	moveq	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f47f af6d 	bne.w	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003218:	e034      	b.n	8003284 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f8e3 	bl	80033e6 <I2C_IsAcknowledgeFailed>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e034      	b.n	8003294 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d028      	beq.n	8003284 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003232:	f7fd ffc7 	bl	80011c4 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	429a      	cmp	r2, r3
 8003240:	d302      	bcc.n	8003248 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d11d      	bne.n	8003284 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003252:	2b80      	cmp	r3, #128	; 0x80
 8003254:	d016      	beq.n	8003284 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f043 0220 	orr.w	r2, r3, #32
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e007      	b.n	8003294 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	2b80      	cmp	r3, #128	; 0x80
 8003290:	d1c3      	bne.n	800321a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032a8:	e034      	b.n	8003314 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f89b 	bl	80033e6 <I2C_IsAcknowledgeFailed>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e034      	b.n	8003324 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c0:	d028      	beq.n	8003314 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c2:	f7fd ff7f 	bl	80011c4 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d302      	bcc.n	80032d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d11d      	bne.n	8003314 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d016      	beq.n	8003314 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f043 0220 	orr.w	r2, r3, #32
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e007      	b.n	8003324 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b04      	cmp	r3, #4
 8003320:	d1c3      	bne.n	80032aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003338:	e049      	b.n	80033ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b10      	cmp	r3, #16
 8003346:	d119      	bne.n	800337c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0210 	mvn.w	r2, #16
 8003350:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e030      	b.n	80033de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337c:	f7fd ff22 	bl	80011c4 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	429a      	cmp	r2, r3
 800338a:	d302      	bcc.n	8003392 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d11d      	bne.n	80033ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	d016      	beq.n	80033ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f043 0220 	orr.w	r2, r3, #32
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e007      	b.n	80033de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d8:	2b40      	cmp	r3, #64	; 0x40
 80033da:	d1ae      	bne.n	800333a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fc:	d11b      	bne.n	8003436 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003406:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f043 0204 	orr.w	r2, r3, #4
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e034      	b.n	80034be <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800345c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f245 5255 	movw	r2, #21845	; 0x5555
 8003466:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6852      	ldr	r2, [r2, #4]
 8003470:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6892      	ldr	r2, [r2, #8]
 800347a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800347c:	f7fd fea2 	bl	80011c4 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003482:	e00f      	b.n	80034a4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003484:	f7fd fe9e 	bl	80011c4 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b27      	cmp	r3, #39	; 0x27
 8003490:	d908      	bls.n	80034a4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e00c      	b.n	80034be <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1e8      	bne.n	8003484 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80034ba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80034d6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e272      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8087 	beq.w	8003612 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003504:	4b92      	ldr	r3, [pc, #584]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 030c 	and.w	r3, r3, #12
 800350c:	2b04      	cmp	r3, #4
 800350e:	d00c      	beq.n	800352a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003510:	4b8f      	ldr	r3, [pc, #572]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b08      	cmp	r3, #8
 800351a:	d112      	bne.n	8003542 <HAL_RCC_OscConfig+0x5e>
 800351c:	4b8c      	ldr	r3, [pc, #560]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003528:	d10b      	bne.n	8003542 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352a:	4b89      	ldr	r3, [pc, #548]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d06c      	beq.n	8003610 <HAL_RCC_OscConfig+0x12c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d168      	bne.n	8003610 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e24c      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354a:	d106      	bne.n	800355a <HAL_RCC_OscConfig+0x76>
 800354c:	4b80      	ldr	r3, [pc, #512]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a7f      	ldr	r2, [pc, #508]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	e02e      	b.n	80035b8 <HAL_RCC_OscConfig+0xd4>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x98>
 8003562:	4b7b      	ldr	r3, [pc, #492]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a7a      	ldr	r2, [pc, #488]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b78      	ldr	r3, [pc, #480]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a77      	ldr	r2, [pc, #476]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e01d      	b.n	80035b8 <HAL_RCC_OscConfig+0xd4>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003584:	d10c      	bne.n	80035a0 <HAL_RCC_OscConfig+0xbc>
 8003586:	4b72      	ldr	r3, [pc, #456]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a71      	ldr	r2, [pc, #452]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800358c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	4b6f      	ldr	r3, [pc, #444]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a6e      	ldr	r2, [pc, #440]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e00b      	b.n	80035b8 <HAL_RCC_OscConfig+0xd4>
 80035a0:	4b6b      	ldr	r3, [pc, #428]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a6a      	ldr	r2, [pc, #424]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b68      	ldr	r3, [pc, #416]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a67      	ldr	r2, [pc, #412]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d013      	beq.n	80035e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7fd fe00 	bl	80011c4 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c8:	f7fd fdfc 	bl	80011c4 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	; 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e200      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	4b5d      	ldr	r3, [pc, #372]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0xe4>
 80035e6:	e014      	b.n	8003612 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7fd fdec 	bl	80011c4 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f0:	f7fd fde8 	bl	80011c4 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e1ec      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003602:	4b53      	ldr	r3, [pc, #332]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x10c>
 800360e:	e000      	b.n	8003612 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d063      	beq.n	80036e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800361e:	4b4c      	ldr	r3, [pc, #304]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800362a:	4b49      	ldr	r3, [pc, #292]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b08      	cmp	r3, #8
 8003634:	d11c      	bne.n	8003670 <HAL_RCC_OscConfig+0x18c>
 8003636:	4b46      	ldr	r3, [pc, #280]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d116      	bne.n	8003670 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003642:	4b43      	ldr	r3, [pc, #268]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_RCC_OscConfig+0x176>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d001      	beq.n	800365a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e1c0      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365a:	4b3d      	ldr	r3, [pc, #244]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4939      	ldr	r1, [pc, #228]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366e:	e03a      	b.n	80036e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d020      	beq.n	80036ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003678:	4b36      	ldr	r3, [pc, #216]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367e:	f7fd fda1 	bl	80011c4 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003686:	f7fd fd9d 	bl	80011c4 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e1a1      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	4b2d      	ldr	r3, [pc, #180]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	4b2a      	ldr	r3, [pc, #168]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4927      	ldr	r1, [pc, #156]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]
 80036b8:	e015      	b.n	80036e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <HAL_RCC_OscConfig+0x270>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fd fd80 	bl	80011c4 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c8:	f7fd fd7c 	bl	80011c4 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e180      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d03a      	beq.n	8003768 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d019      	beq.n	800372e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fa:	4b17      	ldr	r3, [pc, #92]	; (8003758 <HAL_RCC_OscConfig+0x274>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003700:	f7fd fd60 	bl	80011c4 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003708:	f7fd fd5c 	bl	80011c4 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e160      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_RCC_OscConfig+0x26c>)
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003726:	2001      	movs	r0, #1
 8003728:	f000 face 	bl	8003cc8 <RCC_Delay>
 800372c:	e01c      	b.n	8003768 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <HAL_RCC_OscConfig+0x274>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003734:	f7fd fd46 	bl	80011c4 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373a:	e00f      	b.n	800375c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373c:	f7fd fd42 	bl	80011c4 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d908      	bls.n	800375c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e146      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000
 8003754:	42420000 	.word	0x42420000
 8003758:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375c:	4b92      	ldr	r3, [pc, #584]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e9      	bne.n	800373c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80a6 	beq.w	80038c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377a:	4b8b      	ldr	r3, [pc, #556]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10d      	bne.n	80037a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003786:	4b88      	ldr	r3, [pc, #544]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	4a87      	ldr	r2, [pc, #540]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800378c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003790:	61d3      	str	r3, [r2, #28]
 8003792:	4b85      	ldr	r3, [pc, #532]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a2:	4b82      	ldr	r3, [pc, #520]	; (80039ac <HAL_RCC_OscConfig+0x4c8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d118      	bne.n	80037e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ae:	4b7f      	ldr	r3, [pc, #508]	; (80039ac <HAL_RCC_OscConfig+0x4c8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a7e      	ldr	r2, [pc, #504]	; (80039ac <HAL_RCC_OscConfig+0x4c8>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ba:	f7fd fd03 	bl	80011c4 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c2:	f7fd fcff 	bl	80011c4 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b64      	cmp	r3, #100	; 0x64
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e103      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	4b75      	ldr	r3, [pc, #468]	; (80039ac <HAL_RCC_OscConfig+0x4c8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x312>
 80037e8:	4b6f      	ldr	r3, [pc, #444]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	4a6e      	ldr	r2, [pc, #440]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6213      	str	r3, [r2, #32]
 80037f4:	e02d      	b.n	8003852 <HAL_RCC_OscConfig+0x36e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x334>
 80037fe:	4b6a      	ldr	r3, [pc, #424]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	4a69      	ldr	r2, [pc, #420]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	6213      	str	r3, [r2, #32]
 800380a:	4b67      	ldr	r3, [pc, #412]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4a66      	ldr	r2, [pc, #408]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	f023 0304 	bic.w	r3, r3, #4
 8003814:	6213      	str	r3, [r2, #32]
 8003816:	e01c      	b.n	8003852 <HAL_RCC_OscConfig+0x36e>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b05      	cmp	r3, #5
 800381e:	d10c      	bne.n	800383a <HAL_RCC_OscConfig+0x356>
 8003820:	4b61      	ldr	r3, [pc, #388]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	4a60      	ldr	r2, [pc, #384]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	6213      	str	r3, [r2, #32]
 800382c:	4b5e      	ldr	r3, [pc, #376]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4a5d      	ldr	r2, [pc, #372]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6213      	str	r3, [r2, #32]
 8003838:	e00b      	b.n	8003852 <HAL_RCC_OscConfig+0x36e>
 800383a:	4b5b      	ldr	r3, [pc, #364]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	4a5a      	ldr	r2, [pc, #360]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6213      	str	r3, [r2, #32]
 8003846:	4b58      	ldr	r3, [pc, #352]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	4a57      	ldr	r2, [pc, #348]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	f023 0304 	bic.w	r3, r3, #4
 8003850:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d015      	beq.n	8003886 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385a:	f7fd fcb3 	bl	80011c4 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fd fcaf 	bl	80011c4 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0b1      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003878:	4b4b      	ldr	r3, [pc, #300]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ee      	beq.n	8003862 <HAL_RCC_OscConfig+0x37e>
 8003884:	e014      	b.n	80038b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003886:	f7fd fc9d 	bl	80011c4 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fd fc99 	bl	80011c4 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	; 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e09b      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a4:	4b40      	ldr	r3, [pc, #256]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1ee      	bne.n	800388e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d105      	bne.n	80038c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b6:	4b3c      	ldr	r3, [pc, #240]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	4a3b      	ldr	r2, [pc, #236]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8087 	beq.w	80039da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038cc:	4b36      	ldr	r3, [pc, #216]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d061      	beq.n	800399c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d146      	bne.n	800396e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e0:	4b33      	ldr	r3, [pc, #204]	; (80039b0 <HAL_RCC_OscConfig+0x4cc>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e6:	f7fd fc6d 	bl	80011c4 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ee:	f7fd fc69 	bl	80011c4 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e06d      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003900:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003914:	d108      	bne.n	8003928 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003916:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	4921      	ldr	r1, [pc, #132]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003928:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a19      	ldr	r1, [r3, #32]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	430b      	orrs	r3, r1
 800393a:	491b      	ldr	r1, [pc, #108]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <HAL_RCC_OscConfig+0x4cc>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003946:	f7fd fc3d 	bl	80011c4 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394e:	f7fd fc39 	bl	80011c4 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e03d      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCC_OscConfig+0x46a>
 800396c:	e035      	b.n	80039da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <HAL_RCC_OscConfig+0x4cc>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fd fc26 	bl	80011c4 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397c:	f7fd fc22 	bl	80011c4 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e026      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_RCC_OscConfig+0x4c4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x498>
 800399a:	e01e      	b.n	80039da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d107      	bne.n	80039b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e019      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40007000 	.word	0x40007000
 80039b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCC_OscConfig+0x500>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d106      	bne.n	80039d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d001      	beq.n	80039da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40021000 	.word	0x40021000

080039e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0d0      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039fc:	4b6a      	ldr	r3, [pc, #424]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d910      	bls.n	8003a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b67      	ldr	r3, [pc, #412]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 0207 	bic.w	r2, r3, #7
 8003a12:	4965      	ldr	r1, [pc, #404]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b63      	ldr	r3, [pc, #396]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0b8      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d020      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a44:	4b59      	ldr	r3, [pc, #356]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4a58      	ldr	r2, [pc, #352]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a5c:	4b53      	ldr	r3, [pc, #332]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a52      	ldr	r2, [pc, #328]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a68:	4b50      	ldr	r3, [pc, #320]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	494d      	ldr	r1, [pc, #308]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d040      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8e:	4b47      	ldr	r3, [pc, #284]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d115      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e07f      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa6:	4b41      	ldr	r3, [pc, #260]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e073      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab6:	4b3d      	ldr	r3, [pc, #244]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e06b      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac6:	4b39      	ldr	r3, [pc, #228]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f023 0203 	bic.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4936      	ldr	r1, [pc, #216]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad8:	f7fd fb74 	bl	80011c4 <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae0:	f7fd fb70 	bl	80011c4 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e053      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 020c 	and.w	r2, r3, #12
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d1eb      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b08:	4b27      	ldr	r3, [pc, #156]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d210      	bcs.n	8003b38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 0207 	bic.w	r2, r3, #7
 8003b1e:	4922      	ldr	r1, [pc, #136]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b26:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e032      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b44:	4b19      	ldr	r3, [pc, #100]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4916      	ldr	r1, [pc, #88]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	490e      	ldr	r1, [pc, #56]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b76:	f000 f821 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	490a      	ldr	r1, [pc, #40]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b88:	5ccb      	ldrb	r3, [r1, r3]
 8003b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8e:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <HAL_RCC_ClockConfig+0x1cc>)
 8003b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <HAL_RCC_ClockConfig+0x1d0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd fad2 	bl	8001140 <HAL_InitTick>

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40022000 	.word	0x40022000
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	08004930 	.word	0x08004930
 8003bb4:	20000000 	.word	0x20000000
 8003bb8:	20000004 	.word	0x20000004

08003bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bd6:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 030c 	and.w	r3, r3, #12
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d002      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0x30>
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d003      	beq.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x36>
 8003bea:	e027      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bec:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bee:	613b      	str	r3, [r7, #16]
      break;
 8003bf0:	e027      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	0c9b      	lsrs	r3, r3, #18
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	4a17      	ldr	r2, [pc, #92]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bfc:	5cd3      	ldrb	r3, [r2, r3]
 8003bfe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d010      	beq.n	8003c2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c0a:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	0c5b      	lsrs	r3, r3, #17
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	4a11      	ldr	r2, [pc, #68]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c16:	5cd3      	ldrb	r3, [r2, r3]
 8003c18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a0d      	ldr	r2, [pc, #52]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c1e:	fb03 f202 	mul.w	r2, r3, r2
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	e004      	b.n	8003c36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a0c      	ldr	r2, [pc, #48]	; (8003c60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c30:	fb02 f303 	mul.w	r3, r2, r3
 8003c34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	613b      	str	r3, [r7, #16]
      break;
 8003c3a:	e002      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c3e:	613b      	str	r3, [r7, #16]
      break;
 8003c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c42:	693b      	ldr	r3, [r7, #16]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40021000 	.word	0x40021000
 8003c54:	007a1200 	.word	0x007a1200
 8003c58:	08004948 	.word	0x08004948
 8003c5c:	08004958 	.word	0x08004958
 8003c60:	003d0900 	.word	0x003d0900

08003c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c68:	4b02      	ldr	r3, [pc, #8]	; (8003c74 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr
 8003c74:	20000000 	.word	0x20000000

08003c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c7c:	f7ff fff2 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	4903      	ldr	r1, [pc, #12]	; (8003c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c8e:	5ccb      	ldrb	r3, [r1, r3]
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	08004940 	.word	0x08004940

08003ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ca4:	f7ff ffde 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	0adb      	lsrs	r3, r3, #11
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	4903      	ldr	r1, [pc, #12]	; (8003cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cb6:	5ccb      	ldrb	r3, [r1, r3]
 8003cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	08004940 	.word	0x08004940

08003cc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <RCC_Delay+0x34>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a0a      	ldr	r2, [pc, #40]	; (8003d00 <RCC_Delay+0x38>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	0a5b      	lsrs	r3, r3, #9
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	fb02 f303 	mul.w	r3, r2, r3
 8003ce2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ce4:	bf00      	nop
  }
  while (Delay --);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1e5a      	subs	r2, r3, #1
 8003cea:	60fa      	str	r2, [r7, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f9      	bne.n	8003ce4 <RCC_Delay+0x1c>
}
 8003cf0:	bf00      	nop
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr
 8003cfc:	20000000 	.word	0x20000000
 8003d00:	10624dd3 	.word	0x10624dd3

08003d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d07d      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d20:	2300      	movs	r3, #0
 8003d22:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d24:	4b4f      	ldr	r3, [pc, #316]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10d      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d30:	4b4c      	ldr	r3, [pc, #304]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	4a4b      	ldr	r2, [pc, #300]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	61d3      	str	r3, [r2, #28]
 8003d3c:	4b49      	ldr	r3, [pc, #292]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4c:	4b46      	ldr	r3, [pc, #280]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d118      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d58:	4b43      	ldr	r3, [pc, #268]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a42      	ldr	r2, [pc, #264]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d64:	f7fd fa2e 	bl	80011c4 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6a:	e008      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6c:	f7fd fa2a 	bl	80011c4 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e06d      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7e:	4b3a      	ldr	r3, [pc, #232]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d8a:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d02e      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d027      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003da8:	4b2e      	ldr	r3, [pc, #184]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003db2:	4b2e      	ldr	r3, [pc, #184]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003db8:	4b2c      	ldr	r3, [pc, #176]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dbe:	4a29      	ldr	r2, [pc, #164]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d014      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dce:	f7fd f9f9 	bl	80011c4 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fd f9f5 	bl	80011c4 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e036      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0ee      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df8:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	4917      	ldr	r1, [pc, #92]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	4a13      	ldr	r2, [pc, #76]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e28:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	490b      	ldr	r1, [pc, #44]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e46:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	4904      	ldr	r1, [pc, #16]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40007000 	.word	0x40007000
 8003e6c:	42420440 	.word	0x42420440

08003e70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	f200 808a 	bhi.w	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d045      	beq.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d075      	beq.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003ea6:	e082      	b.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003ea8:	4b46      	ldr	r3, [pc, #280]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003eae:	4b45      	ldr	r3, [pc, #276]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d07b      	beq.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	0c9b      	lsrs	r3, r3, #18
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	4a41      	ldr	r2, [pc, #260]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003ec4:	5cd3      	ldrb	r3, [r2, r3]
 8003ec6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d015      	beq.n	8003efe <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ed2:	4b3c      	ldr	r3, [pc, #240]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	0c5b      	lsrs	r3, r3, #17
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	4a3b      	ldr	r2, [pc, #236]	; (8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003ede:	5cd3      	ldrb	r3, [r2, r3]
 8003ee0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00d      	beq.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003eec:	4a38      	ldr	r2, [pc, #224]	; (8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	61fb      	str	r3, [r7, #28]
 8003efc:	e004      	b.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4a34      	ldr	r2, [pc, #208]	; (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
 8003f06:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003f08:	4b2e      	ldr	r3, [pc, #184]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f14:	d102      	bne.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	61bb      	str	r3, [r7, #24]
      break;
 8003f1a:	e04a      	b.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	4a2d      	ldr	r2, [pc, #180]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	085b      	lsrs	r3, r3, #1
 8003f28:	61bb      	str	r3, [r7, #24]
      break;
 8003f2a:	e042      	b.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003f2c:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f3c:	d108      	bne.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003f48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	e01f      	b.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f5a:	d109      	bne.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003f5c:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003f68:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	e00f      	b.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f7a:	d11c      	bne.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d016      	beq.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003f88:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003f8c:	61bb      	str	r3, [r7, #24]
      break;
 8003f8e:	e012      	b.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003f90:	e011      	b.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003f92:	f7ff fe85 	bl	8003ca0 <HAL_RCC_GetPCLK2Freq>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	0b9b      	lsrs	r3, r3, #14
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	61bb      	str	r3, [r7, #24]
      break;
 8003fac:	e004      	b.n	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e002      	b.n	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003fb2:	bf00      	nop
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003fb6:	bf00      	nop
    }
  }
  return (frequency);
 8003fb8:	69bb      	ldr	r3, [r7, #24]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	0800495c 	.word	0x0800495c
 8003fcc:	0800496c 	.word	0x0800496c
 8003fd0:	007a1200 	.word	0x007a1200
 8003fd4:	003d0900 	.word	0x003d0900
 8003fd8:	aaaaaaab 	.word	0xaaaaaaab

08003fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d001      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e03a      	b.n	800406a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a18      	ldr	r2, [pc, #96]	; (8004074 <HAL_TIM_Base_Start_IT+0x98>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00e      	beq.n	8004034 <HAL_TIM_Base_Start_IT+0x58>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d009      	beq.n	8004034 <HAL_TIM_Base_Start_IT+0x58>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a14      	ldr	r2, [pc, #80]	; (8004078 <HAL_TIM_Base_Start_IT+0x9c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d004      	beq.n	8004034 <HAL_TIM_Base_Start_IT+0x58>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a13      	ldr	r2, [pc, #76]	; (800407c <HAL_TIM_Base_Start_IT+0xa0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d111      	bne.n	8004058 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b06      	cmp	r3, #6
 8004044:	d010      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0201 	orr.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004056:	e007      	b.n	8004068 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40000400 	.word	0x40000400
 800407c:	40000800 	.word	0x40000800

08004080 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e041      	b.n	8004116 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fc ff92 	bl	8000fd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3304      	adds	r3, #4
 80040bc:	4619      	mov	r1, r3
 80040be:	4610      	mov	r0, r2
 80040c0:	f000 f992 	bl	80043e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d109      	bne.n	8004144 <HAL_TIM_PWM_Start+0x24>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	e022      	b.n	800418a <HAL_TIM_PWM_Start+0x6a>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b04      	cmp	r3, #4
 8004148:	d109      	bne.n	800415e <HAL_TIM_PWM_Start+0x3e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	bf14      	ite	ne
 8004156:	2301      	movne	r3, #1
 8004158:	2300      	moveq	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	e015      	b.n	800418a <HAL_TIM_PWM_Start+0x6a>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b08      	cmp	r3, #8
 8004162:	d109      	bne.n	8004178 <HAL_TIM_PWM_Start+0x58>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	e008      	b.n	800418a <HAL_TIM_PWM_Start+0x6a>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b01      	cmp	r3, #1
 8004182:	bf14      	ite	ne
 8004184:	2301      	movne	r3, #1
 8004186:	2300      	moveq	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e05e      	b.n	8004250 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d104      	bne.n	80041a2 <HAL_TIM_PWM_Start+0x82>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a0:	e013      	b.n	80041ca <HAL_TIM_PWM_Start+0xaa>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d104      	bne.n	80041b2 <HAL_TIM_PWM_Start+0x92>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b0:	e00b      	b.n	80041ca <HAL_TIM_PWM_Start+0xaa>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d104      	bne.n	80041c2 <HAL_TIM_PWM_Start+0xa2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c0:	e003      	b.n	80041ca <HAL_TIM_PWM_Start+0xaa>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2202      	movs	r2, #2
 80041c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2201      	movs	r2, #1
 80041d0:	6839      	ldr	r1, [r7, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 faf2 	bl	80047bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1e      	ldr	r2, [pc, #120]	; (8004258 <HAL_TIM_PWM_Start+0x138>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d107      	bne.n	80041f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a18      	ldr	r2, [pc, #96]	; (8004258 <HAL_TIM_PWM_Start+0x138>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00e      	beq.n	800421a <HAL_TIM_PWM_Start+0xfa>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004204:	d009      	beq.n	800421a <HAL_TIM_PWM_Start+0xfa>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a14      	ldr	r2, [pc, #80]	; (800425c <HAL_TIM_PWM_Start+0x13c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_TIM_PWM_Start+0xfa>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a12      	ldr	r2, [pc, #72]	; (8004260 <HAL_TIM_PWM_Start+0x140>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d111      	bne.n	800423e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b06      	cmp	r3, #6
 800422a:	d010      	beq.n	800424e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423c:	e007      	b.n	800424e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40012c00 	.word	0x40012c00
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800

08004264 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800427e:	2302      	movs	r3, #2
 8004280:	e0ae      	b.n	80043e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b0c      	cmp	r3, #12
 800428e:	f200 809f 	bhi.w	80043d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042cd 	.word	0x080042cd
 800429c:	080043d1 	.word	0x080043d1
 80042a0:	080043d1 	.word	0x080043d1
 80042a4:	080043d1 	.word	0x080043d1
 80042a8:	0800430d 	.word	0x0800430d
 80042ac:	080043d1 	.word	0x080043d1
 80042b0:	080043d1 	.word	0x080043d1
 80042b4:	080043d1 	.word	0x080043d1
 80042b8:	0800434f 	.word	0x0800434f
 80042bc:	080043d1 	.word	0x080043d1
 80042c0:	080043d1 	.word	0x080043d1
 80042c4:	080043d1 	.word	0x080043d1
 80042c8:	0800438f 	.word	0x0800438f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f8ea 	bl	80044ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0208 	orr.w	r2, r2, #8
 80042e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0204 	bic.w	r2, r2, #4
 80042f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	619a      	str	r2, [r3, #24]
      break;
 800430a:	e064      	b.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f930 	bl	8004578 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	021a      	lsls	r2, r3, #8
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	619a      	str	r2, [r3, #24]
      break;
 800434c:	e043      	b.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 f979 	bl	800464c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0208 	orr.w	r2, r2, #8
 8004368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0204 	bic.w	r2, r2, #4
 8004378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69d9      	ldr	r1, [r3, #28]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	61da      	str	r2, [r3, #28]
      break;
 800438c:	e023      	b.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 f9c3 	bl	8004720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69d9      	ldr	r1, [r3, #28]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	021a      	lsls	r2, r3, #8
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	61da      	str	r2, [r3, #28]
      break;
 80043ce:	e002      	b.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	75fb      	strb	r3, [r7, #23]
      break;
 80043d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a29      	ldr	r2, [pc, #164]	; (80044a0 <TIM_Base_SetConfig+0xb8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00b      	beq.n	8004418 <TIM_Base_SetConfig+0x30>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004406:	d007      	beq.n	8004418 <TIM_Base_SetConfig+0x30>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a26      	ldr	r2, [pc, #152]	; (80044a4 <TIM_Base_SetConfig+0xbc>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d003      	beq.n	8004418 <TIM_Base_SetConfig+0x30>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a25      	ldr	r2, [pc, #148]	; (80044a8 <TIM_Base_SetConfig+0xc0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d108      	bne.n	800442a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a1c      	ldr	r2, [pc, #112]	; (80044a0 <TIM_Base_SetConfig+0xb8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00b      	beq.n	800444a <TIM_Base_SetConfig+0x62>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004438:	d007      	beq.n	800444a <TIM_Base_SetConfig+0x62>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a19      	ldr	r2, [pc, #100]	; (80044a4 <TIM_Base_SetConfig+0xbc>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d003      	beq.n	800444a <TIM_Base_SetConfig+0x62>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a18      	ldr	r2, [pc, #96]	; (80044a8 <TIM_Base_SetConfig+0xc0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d108      	bne.n	800445c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a07      	ldr	r2, [pc, #28]	; (80044a0 <TIM_Base_SetConfig+0xb8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d103      	bne.n	8004490 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	615a      	str	r2, [r3, #20]
}
 8004496:	bf00      	nop
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	40000400 	.word	0x40000400
 80044a8:	40000800 	.word	0x40000800

080044ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	f023 0201 	bic.w	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0303 	bic.w	r3, r3, #3
 80044e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f023 0302 	bic.w	r3, r3, #2
 80044f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a1c      	ldr	r2, [pc, #112]	; (8004574 <TIM_OC1_SetConfig+0xc8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d10c      	bne.n	8004522 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f023 0308 	bic.w	r3, r3, #8
 800450e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f023 0304 	bic.w	r3, r3, #4
 8004520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a13      	ldr	r2, [pc, #76]	; (8004574 <TIM_OC1_SetConfig+0xc8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d111      	bne.n	800454e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	621a      	str	r2, [r3, #32]
}
 8004568:	bf00      	nop
 800456a:	371c      	adds	r7, #28
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40012c00 	.word	0x40012c00

08004578 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f023 0210 	bic.w	r2, r3, #16
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0320 	bic.w	r3, r3, #32
 80045c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a1d      	ldr	r2, [pc, #116]	; (8004648 <TIM_OC2_SetConfig+0xd0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d10d      	bne.n	80045f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a14      	ldr	r2, [pc, #80]	; (8004648 <TIM_OC2_SetConfig+0xd0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d113      	bne.n	8004624 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800460a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr
 8004648:	40012c00 	.word	0x40012c00

0800464c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0303 	bic.w	r3, r3, #3
 8004682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a1d      	ldr	r2, [pc, #116]	; (800471c <TIM_OC3_SetConfig+0xd0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d10d      	bne.n	80046c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a14      	ldr	r2, [pc, #80]	; (800471c <TIM_OC3_SetConfig+0xd0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d113      	bne.n	80046f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	621a      	str	r2, [r3, #32]
}
 8004710:	bf00      	nop
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40012c00 	.word	0x40012c00

08004720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800476a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	031b      	lsls	r3, r3, #12
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a0f      	ldr	r2, [pc, #60]	; (80047b8 <TIM_OC4_SetConfig+0x98>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d109      	bne.n	8004794 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004786:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	019b      	lsls	r3, r3, #6
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	621a      	str	r2, [r3, #32]
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr
 80047b8:	40012c00 	.word	0x40012c00

080047bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	2201      	movs	r2, #1
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1a      	ldr	r2, [r3, #32]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	43db      	mvns	r3, r3
 80047de:	401a      	ands	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a1a      	ldr	r2, [r3, #32]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr

08004804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004818:	2302      	movs	r3, #2
 800481a:	e046      	b.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004842:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a16      	ldr	r2, [pc, #88]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00e      	beq.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004868:	d009      	beq.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a12      	ldr	r2, [pc, #72]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a10      	ldr	r2, [pc, #64]	; (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d10c      	bne.n	8004898 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	4313      	orrs	r3, r2
 800488e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40000400 	.word	0x40000400
 80048bc:	40000800 	.word	0x40000800

080048c0 <memset>:
 80048c0:	4603      	mov	r3, r0
 80048c2:	4402      	add	r2, r0
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d100      	bne.n	80048ca <memset+0xa>
 80048c8:	4770      	bx	lr
 80048ca:	f803 1b01 	strb.w	r1, [r3], #1
 80048ce:	e7f9      	b.n	80048c4 <memset+0x4>

080048d0 <__libc_init_array>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	2600      	movs	r6, #0
 80048d4:	4d0c      	ldr	r5, [pc, #48]	; (8004908 <__libc_init_array+0x38>)
 80048d6:	4c0d      	ldr	r4, [pc, #52]	; (800490c <__libc_init_array+0x3c>)
 80048d8:	1b64      	subs	r4, r4, r5
 80048da:	10a4      	asrs	r4, r4, #2
 80048dc:	42a6      	cmp	r6, r4
 80048de:	d109      	bne.n	80048f4 <__libc_init_array+0x24>
 80048e0:	f000 f81a 	bl	8004918 <_init>
 80048e4:	2600      	movs	r6, #0
 80048e6:	4d0a      	ldr	r5, [pc, #40]	; (8004910 <__libc_init_array+0x40>)
 80048e8:	4c0a      	ldr	r4, [pc, #40]	; (8004914 <__libc_init_array+0x44>)
 80048ea:	1b64      	subs	r4, r4, r5
 80048ec:	10a4      	asrs	r4, r4, #2
 80048ee:	42a6      	cmp	r6, r4
 80048f0:	d105      	bne.n	80048fe <__libc_init_array+0x2e>
 80048f2:	bd70      	pop	{r4, r5, r6, pc}
 80048f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f8:	4798      	blx	r3
 80048fa:	3601      	adds	r6, #1
 80048fc:	e7ee      	b.n	80048dc <__libc_init_array+0xc>
 80048fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004902:	4798      	blx	r3
 8004904:	3601      	adds	r6, #1
 8004906:	e7f2      	b.n	80048ee <__libc_init_array+0x1e>
 8004908:	08004970 	.word	0x08004970
 800490c:	08004970 	.word	0x08004970
 8004910:	08004970 	.word	0x08004970
 8004914:	08004974 	.word	0x08004974

08004918 <_init>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	bf00      	nop
 800491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491e:	bc08      	pop	{r3}
 8004920:	469e      	mov	lr, r3
 8004922:	4770      	bx	lr

08004924 <_fini>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	bf00      	nop
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr
